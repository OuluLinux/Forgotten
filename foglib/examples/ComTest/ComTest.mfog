using "Com/Com.fog";

namespace Com::Tester {

class App {
	
	static bool TestCmp(const char& c, void*) {
		return c == 'c';
	};
	
	struct VirtualBase {
		VirtualBase() {}
		virtual ~VirtualBase() {}
		
		int a = 3;
	};
	struct DerivedBase : public VirtualBase {
		DerivedBase() {}
		
		int a = 8;
	};
	
	$Tuple2(SomeTuple2, int, double);
	$RefTuple2(SomeRefTuple2, int, double);
	
	inline public void Run() {
		uint64 v = UINT_MAX;
		ASSERT(sizeof(v) == 8);
		
		VoidPtr p;
		ASSERT(p == Null);
		
		ASSERT(SignificantBits(0x8000) == 16);
		ASSERT(SignificantBits64(0x8000) == 16);
		
		CombineHash ch;
		ch.Put(777999777).Put(123).Put64(0xF0F0F0F0F0F0F0F0);
		dword hash = ch;
		ASSERT(hash == 1894504625);
		int a = 0;
		int b = 1;
		ASSERT(min(a, b) < max(a, b));
		
		int r = Random();
		double d = Randomf();
		int j = d;
		
		
		const char* test_str = "abcdef";
		int test_strlen = C::StringLength(test_str);
		ASSERT(FindIf(test_str, test_str + test_strlen, &TestCmp));
		
		
		ASSERT(String("test") == "test");
		ASSERT(String::DblStr(1.2) == "1.2");
		ASSERT("abc" + String("def") == "abcdef");
		ASSERT(String("abc") + "def" == "abcdef");
		ASSERT(ToString(ToWString<String>("abc")) == "abc");
		ASSERT(ToInt<String>("123") == 123);
		ASSERT(ToString(123) == "123");
		ASSERT(HexStr((void*)0x123f) == "0x123F");
		
		
		SomeTuple2 ttt = {1, 1.2};
		ASSERT(ToString(ttt) == "1, 1.2");
		
		SomeRefTuple2 tttref(ttt.a, ttt.b);
		ASSERT(ToString(tttref) == "1, 1.2");
		
		One<String> onestr;
		onestr.Create();
		*onestr = "hello";
		ASSERT(*onestr == "hello");
		
		One<VirtualBase> onebase;
		onebase.CreateDerived<DerivedBase>();
		ASSERT(onebase.GetDerived<DerivedBase>()->a == 8);
		
		FutureOne<String> fone;
		fone = new String;
		fone.Wait();
		
		Vector<String> strvec;
		Array<String> strarr;
		for(int i = 0; i < 3; i++) {
			strvec << IntStr(i);
			strarr << IntStr(i);
		}
		for(int i = 0; i < 3; i++) {
			ASSERT(strvec[i] == strarr[i]);
		}
		
		//for (char& c: strvec) c += 1;
		//for (char& c: strarr) c += 1;
		
		
		
		/*ConstChar* c = s;
		Console::Put("Starting Com-testing\n");*/
		
		/*Console::Put(program.GetVertexSource());
		
		Console::Put("\n\n");
		Console::Put("Fragment source:\n");
		Console::Put(program.GetFragmentSource());*/
		
	}
};


}


$MainClass(Com::Tester::App);






/*
auto declaration defer(class clientClass)
{
${${clientClass}::deferred($Scope)};
}
*/


/*auto declaration BuildInterface() {
	auto for (iterator k = $variables(); k; ++k) {
		!inline $k->derive_type() get_${k->name()} () {return $k->name();}
		!inline void set_${k->name()} (const $k->derive_type()& v) {$k->name() = v;;}
	}
}

struct Person {
	export/interface WebGL;
	export/implementation WebGL;
	
	int age;
	double length;
	
	$BuildInterface();
	
};*/

/*struct GeneratedInterface {
	
};

auto GeneratedInterface::~GeneratedInterface() {
	for (iterator k = $variables(); k; ++k) {
		!inline static void get_${k->name()} () ;
	}
}

struct Person : auto virtual GeneratedInterface {};*/



