using "Com/Com.fog";

namespace Com {




class Tester {
	
	static bool TestCmp(const char& c, void*) {
		return c == 'c';
	};
	
	$Tuple2(SomeTuple2, int, double);
	$RefTuple2(SomeRefTuple2, int, double);
	
	!inline public void Run() {
		uint64 v = UINT_MAX;
		ASSERT(sizeof(v) == 8);
		
		VoidPtr p;
		ASSERT(p == Null);
		
		ASSERT(SignificantBits(0x8000) == 16);
		ASSERT(SignificantBits64(0x8000) == 16);
		
		CombineHash ch;
		ch.Put(777999777).Put(123).Put64(0xF0F0F0F0F0F0F0F0);
		dword hash = ch;
		ASSERT(hash == 1894504625);
		int a = 0;
		int b = 1;
		ASSERT(min(a, b) < max(a, b));
		
		int r = Random();
		double d = Randomf();
		int j = d;
		
		const char* test_str = "abcdef";
		int test_strlen = StringLength(test_str);
		ASSERT(FindIf(test_str, test_str + test_strlen, &TestCmp));
		
		
		ASSERT(String("test") == "test");
		ASSERT(String::DblStr(1.2) == "1.2");
		ASSERT("abc" + String("def") == "abcdef");
		ASSERT(String("abc") + "def" == "abcdef");
		ASSERT(ToString(ToWString<String>("abc")) == "abc");
		ASSERT(ToInt<String>("123") == 123);
		ASSERT(ToString(123) == "123");
		ASSERT(HexStr((void*)0x123f) == "0x123F");
		
		
		SomeTuple2 ttt = {1, 1.2};
		ASSERT(ToString(ttt) == "1, 1.2");
		
		SomeRefTuple2 tttref(ttt.a, ttt.b);
		ASSERT(ToString(tttref) == "1, 1.2");
		
		/*
		ConstChar* c = s;
		Console::Put("Starting Com-testing\n");*/
		
		/*Console::Put(program.GetVertexSource());
		
		Console::Put("\n\n");
		Console::Put("Fragment source:\n");
		Console::Put(program.GetFragmentSource());*/
		
	}
};



}

$MainClass(Com::Tester);






/*
auto declaration defer(class clientClass)
{
${${clientClass}::deferred($Scope)};
}
*/


/*auto declaration BuildInterface() {
	auto for (iterator k = $variables(); k; ++k) {
		!inline $k->derive_type() get_${k->name()} () {return $k->name();}
		!inline void set_${k->name()} (const $k->derive_type()& v) {$k->name() = v;;}
	}
}

struct Person {
	export/interface WebGL;
	export/implementation WebGL;
	
	int age;
	double length;
	
	$BuildInterface();
	
};*/

/*struct GeneratedInterface {
	
};

auto GeneratedInterface::~GeneratedInterface() {
	for (iterator k = $variables(); k; ++k) {
		!inline static void get_${k->name()} () ;
	}
}

struct Person : auto virtual GeneratedInterface {};*/



