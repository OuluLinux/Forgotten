namespace Hash {
using/interface Lang;

class Combine {
	$MakeMoveable();
	
	uint32 hash = 123456789;

public:
	Combine() {}
	Combine(int v0) { Put(v0); }
	Combine(int v0, int v1) { Put(v0); Put(v1); }

	operator uint32() const { return hash; }
	uint32 Get() const { return hash; }

	Combine& Put(int value) { hash = ((hash << 5) + hash) + value; return *this; }
	Combine& Put64(int64 value) {Put((int)(value >> 32)); Put((int)(value & 0xFFFFFFFFULL)); return *this; }
	
	Combine& operator << (int value) { Put(value); return *this; }
};


template <class K> inline uint32 GetValue(const K& k) { return k.GetHashValue(); }
template <> inline uint32 GetValue(const char& k) { return k; }
template <> inline uint32 GetValue(const int& k) { return k; }
template <> inline uint32 GetValue(const uint32& k) { return k; }
template <> inline uint32 GetValue(const uint64& k) {
	uint32 a = k & 0xFFFFFFFFULL;
	uint32 b = k >> 32ULL;
	uint32 hash = a ^ b;
	return hash;
}
template <> inline uint32 GetValue(const float& k) { return static_cast<uint32>(k); }
template <> inline uint32 GetValue(const double& k) {return GetValue(*(uint64*)&k);}
template <> inline uint32 GetValue(const VoidPtr& k) {
	auto if ($IsDefined("CPU64"))
		return GetValue(k.Int());
	else
		return GetValue(k.Int());
}


}

#define CombineHash		Hash::Combine
#define GetValueHash	Hash::GetValue

