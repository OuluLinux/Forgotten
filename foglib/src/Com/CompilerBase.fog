namespace TextProc {
using/interface Util;



auto declaration MakeImmediateTypesEqual(token T) {
	bool operator==(const $T& t) const {
		return MemoryCompare(this, &t, sizeof($T)) == 0;
	}
}


struct FileLocation {
	$MakeMoveable();
	
	String file;
	int line = -1, col = -1, cursor = -1;
	
	FileLocation() {}
	FileLocation(const FileLocation& loc) {*this = loc;}
	void SetFileLocation(const FileLocation& loc) {*this = loc;}
	void operator=(const FileLocation& loc) {
		file = loc.file;
		line = loc.line;
		col = loc.col;
		cursor = loc.cursor;
	}
	bool operator==(const FileLocation& loc) const {return file == loc.file && cursor == loc.cursor;}
	
};


enum { PROCMSG_UNKNOWN, PROCMSG_SKIP, PROCMSG_INFO, PROCMSG_WARNING, PROCMSG_ERROR };


struct ProcMsg : public FileLocation {
	$MakeMoveable();
	
	int severity = 0;
	String src;
	String msg;

	ProcMsg() {}
	ProcMsg(const ProcMsg& e) { *this = e; }
	ProcMsg(String source, FileLocation loc, int severity, String msg) {
		src = source;
		SetFileLocation(loc);
		this->severity = severity;
		this->msg = msg;
	}
	
	$MakeImmediateTypesEqual(ProcMsg);
	
	void operator=(const ProcMsg& e) {
		msg = e.msg;
		file = e.file;
		src = e.src;
		line = e.line;
		col = e.col;
		severity = e.severity;
	}
	
	void Set(String source, FileLocation loc, int severity, String msg) {
		this->src = source;
		SetFileLocation(loc);
		this->severity = severity;
		this->msg = msg;
	}
	
	String AsString() const {
		String s;
		s	<< src
			<< ": " << file
			<< ":" << line
			<< ":" << col
			<< ": " << GetSeverityString()
			<< ": " << msg;
		return s;
	}
	
	String GetSeverityString() const {
		switch (severity) {
		case PROCMSG_SKIP: return "skip";
		case PROCMSG_INFO: return "info";
		case PROCMSG_WARNING: return "warning";
		case PROCMSG_ERROR: return "error";
		default: return "<invalid severity>";
		}
	}
};



class ErrorSource {
	String error_path, src;
	bool fail = false;

protected:
	void PrintHeader(String file = "", int line = -1, int col = -1);
	void Internal(String msg);
	void InternalWarning(String msg);
	void Error(String msg, int line, int col);
	void Error(String msg, String file, int line, int col);
	void Error(String msg);
	void Warning(String msg, int line, int col);
	void Warning(String msg, String file, int line, int col);
	void Warning(String msg);
	void Info(String msg);


public:
	ErrorSource() {}

	void SetErrorPath(String path) { error_path = path; }
	void SetSource(String s) { src = s; }

	//Callback1<struct Error> WhenError;
};


}

#define FileLocation			TextProc::FileLocation
