namespace TextProc {
using/interface Container;
using/interface Util;

$MakeException(InputExc);

enum {
	FP_INT,
	FP_DEC,
	FP_FRAC,
	FP_SIGN,
	FP_EXP,
	FP_F,
	FP_END,
	FP_BIN,
	FP_OCTHEX,
	FP_OCT,
	FP_HEX
};

enum {
	TK_UNKNOWN,
	
	TK_EXCLAMATION = '!',
	TK_NUMBERSIGN = '#',
	TK_PERCENT = '%',
	TK_AMPERSAND = '&',
	TK_DIV = '/',
	TK_BRACKET_BEGIN = '{',
	TK_BRACKET_END = '}',
	TK_PARENTHESIS_BEGIN = '(',
	TK_PARENTHESIS_END = ')',
	TK_SQUARE_BEGIN = '[',
	TK_SQUARE_END = ']',
	TK_ASS = '=',
	TK_QUESTION = '?',
	TK_PLUS = '+',
	TK_SOLIDUS = '\\',
	TK_ACCENT = '^',
	TK_TILDE = '~',
	TK_MUL = '*',
	TK_AT = '@',
	TK_OR = '|',
	TK_MINUS = '-',
	TK_SEMICOLON = ';',
	TK_COMMA = ',',
	TK_PUNCT = '.',
	TK_COLON = ':',
	TK_LESS = '<',
	TK_GREATER = '>',
	TK_NEWLINE = '\n',
	TK_DOLLARSIGN = '$',
	
	TK_ID = 1000,
	TK_INTEGER,
	TK_BIN,
	TK_HEX,
	TK_OCT,
	TK_FLOAT,
	TK_DOUBLE,
	TK_STRING,
	TK_CHAR,
	TK_BLOCK_COMMENT,
	TK_COMMENT,
	TK_INVALID,
	
	// Combined tokens (not enabled by default)
	TK_INC,
	TK_DEC,
	TK_LSHIFT,
	TK_RSHIFT,
	TK_EQ,
	TK_LSEQ,
	TK_GREQ,
	TK_INEQ,
	TK_LOGAND,
	TK_LOGOR,
	TK_MULASS,
	TK_DIVASS,
	TK_MODASS,
	TK_ADDASS,
	TK_SUBASS,
	TK_ANDASS,
	TK_XORASS,
	TK_ORASS,
	TK_LSHIFTASS,
	TK_RSHIFTASS,
	TK_3DOTS,
	
	TK_EOF = 100000,
	TK_COMBINED2_BEGIN = TK_INC,
	TK_COMBINED3_BEGIN = TK_LSHIFTASS,
};


struct Token {
	$MakeMoveable();
	
	FileLocation loc, end;
	int type = 0;
	String str_value;
	int spaces = 0;
	
	Token() {}
	Token(const Token& t) {*this = t;}
	void operator=(const Token& t) {type = t.type; str_value = t.str_value; loc = t.loc; end = t.end; spaces = t.spaces;}
	bool operator==(const Token& t) const {return t.type == type && t.str_value == str_value && t.loc == loc && end == t.end && t.spaces == spaces;}
	bool operator!=(const Token& t) const {return !(t == *this);}
	bool IsType(int i) const {return type == i;}
	String GetString() const {return str_value;}
	String GetTypeString() const {return StaticGetTypeString(type);}
	static String StaticGetTypeString(int type) {
		switch (type) {
			case TK_UNKNOWN: return "<unknown>";
			case TK_ID: return "id";
			case TK_INTEGER: return "integer";
			case TK_FLOAT: return "float";
			case TK_DOUBLE: return "double";
			case TK_EXCLAMATION: return "exclamation";
			case TK_STRING: return "string";
			case TK_NUMBERSIGN: return "number-sign";
			case TK_PERCENT: return "percent";
			case TK_AMPERSAND: return "ampersand";
			case TK_DIV: return "divide";
			case TK_BRACKET_BEGIN: return "bracket-begin";
			case TK_BRACKET_END: return "bracket-end";
			case TK_PARENTHESIS_BEGIN: return "parenthesis-begin";
			case TK_PARENTHESIS_END: return "parenthesis-end";
			case TK_SQUARE_BEGIN: return "square-begin";
			case TK_SQUARE_END: return "square-end";
			case TK_ASS: return "assign";
			case TK_QUESTION: return "question-mark";
			case TK_PLUS: return "plus";
			case TK_SOLIDUS: return "solidus";
			case TK_ACCENT: return "accent";
			case TK_TILDE: return "tilde";
			case TK_MUL: return "multiply";
			case TK_CHAR: return "char";
			case TK_OR: return "or";
			case TK_MINUS: return "minus";
			case TK_SEMICOLON: return "semicolon";
			case TK_COMMA: return "comma";
			case TK_PUNCT: return "punct";
			case TK_COLON: return "colon";
			case TK_LESS: return "less";
			case TK_GREATER: return "greater";
			case TK_NEWLINE: return "newline";
			case TK_BLOCK_COMMENT: return "block-comment";
			case TK_COMMENT: return "comment";
			case TK_BIN: return "binary-number";
			case TK_HEX: return "hex-number";
			case TK_OCT: return "oct-number";
			case TK_INVALID: return "invalid";
			case TK_3DOTS: return "3-dots";
			case TK_EOF: return "end-of-file";
		}
		return "";
	}
	String AsString() const {
		String s = GetTypeString() + ": " + EscapeString(GetTextValue());
		return s;
	}
	String GetTextValue() const {return StaticGetTextValue(type, str_value);}
	static String StaticGetTextValue(int type, String str_value) {
		switch (type) {
			case TK_UNKNOWN: return "";
			case TK_ID: return str_value;
			case TK_INTEGER: return str_value;
			case TK_FLOAT: return str_value;
			case TK_DOUBLE: return str_value;
			case TK_EXCLAMATION: return "!";
			case TK_STRING: return (String)"\"" + EscapeString(str_value) + "\"";
			case TK_NUMBERSIGN: return "#";
			case TK_PERCENT: return "%";
			case TK_AMPERSAND: return "&";
			case TK_BRACKET_BEGIN: return "{";
			case TK_BRACKET_END: return "}";
			case TK_DIV: return "/";
			case TK_PARENTHESIS_BEGIN: return "(";
			case TK_PARENTHESIS_END: return ")";
			case TK_SQUARE_BEGIN: return "[";
			case TK_SQUARE_END: return "]";
			case TK_ASS: return "=";
			case TK_QUESTION: return "?";
			case TK_PLUS: return "+";
			case TK_SOLIDUS: return "\\";
			case TK_ACCENT: return "^";
			case TK_TILDE: return "~";
			case TK_MUL: return "*";
			case TK_CHAR: return (String)"'" + EscapeString(str_value) + "'";
			case TK_OR: return "|";
			case TK_MINUS: return "-";
			case TK_SEMICOLON: return ";";
			case TK_COMMA: return ",";
			case TK_PUNCT: return ".";
			case TK_COLON: return ":";
			case TK_LESS: return "<";
			case TK_GREATER: return ">";
			case TK_NEWLINE: return "\n";
			case TK_BLOCK_COMMENT: return (String)"/* " + str_value + "*/";
			case TK_COMMENT: return (String)"// " + str_value;
			case TK_BIN: return str_value;
			case TK_HEX: return str_value;
			case TK_OCT: return str_value;
			case TK_DOLLARSIGN: return "$";
			case TK_3DOTS: return "...";
			case TK_EOF: return "EOF";
			default: Panic("Unhandled token type");
		}
		return "";
	}
};


class Tokenizer  {
	FileLocation loc;
	int cursor = 0;
	String input;
	bool skip_comments = false;
	bool skip_newlines = false;
	bool skip_separateunary = false;
	int pass_cursor = 0;
	
	int tab_size = 4;
	
protected:
	
	Vector<Token> tokens;
	
	void Next() {loc.col++; loc.cursor++; cursor++;}
	Token& Add(int token_id);
	void AppendString(String& s);
	
	void AddError(FileLocation loc, String msg)   {messages.Add().Set("Tokenizer", loc, PROCMSG_ERROR, msg);}
	void AddWarning(FileLocation loc, String msg) {messages.Add().Set("Tokenizer", loc, PROCMSG_WARNING, msg);}
	
public:
	Tokenizer();
	bool Load(String str, String path, int line=1);
	void SkipComments(bool b=true) {skip_comments = b;}
	void SkipNewLines(bool b=true) {skip_newlines = b;}
	void SkipSeparateUnary(bool b=true) {skip_separateunary = b;}
	void SetTabSize(int i) {tab_size = i;}
	
	void Dump() const {DUMPC(tokens);}
	
	const Vector<Token>& GetTokens() const {return tokens;}
	
	void Remove(int i) {tokens.Remove(i);}
	//Token& Insert(int i, int type);
	
	int GetPassCursor() const {return pass_cursor;}
	void PassToken(int tk);
	bool IsToken(int tk);
	bool TryPassToken(int tk);
	String ReadString();
	String ReadId();
	int64 ReadInt();
	double ReadDouble();
	
	
	Vector<ProcMsg> messages;
	
};

struct Pos {
	int pos = -1;
	Pos() {}
	Pos(const Pos& p) : pos(p.pos) {}
	bool Is() const {return pos >= 0;}
};

class CBase {
	typedef TextProc::Tokenizer Toknzr;
	
	const Vector<Token>* tokens = NULL;
	int pos = 0;
	
	bool ignore_newline = true;
	
	One<Toknzr> t;
	String src_name;
	String input;
public:
	typedef CBase CLASSNAME;
	//CBase() {}
	CBase(String str, String src_name="cparser", int line=1) {t.Create(); t->Load(str, src_name, line); Load(str, src_name, t->GetTokens());}
	CBase(String str, String src_name, const Vector<Token>& tokens) {Load(str, src_name, tokens);}
	
	void Dump() {TODO;}
	
	String GetFileName() const {return src_name;}
	
	void Load(String input, String src_name, const Vector<Token>& tokens);
	void IgnoreNewline(bool b);
	
	const Vector<Token>& GetTokens() const {return *tokens;}
	
	void Next()		{pos++;}
	void SkipTerm()	{pos++;}
	const Token& GetCurrent() const;
	bool IsEnd() const;
	int GetTokenCount() const {if (tokens) return tokens->GetCount(); else return 0;}
	int GetTokenPos() const {return pos;}
	FileLocation GetLocation() const;
	Pos GetPos() {Pos p; p.pos = pos; return p;}
	void SetPos(const Pos& p) {ASSERT(tokens && p.pos >= 0 && p.pos < tokens->GetCount()); pos = p.pos;}
	
	String ReadId();
	int ReadInt();
	void PassNewline();
	
	bool Id(String id);
	bool Newline();
	bool Type(int i);
	void PassType(int i) {if (!Type(i)) {throw InputExc((String)"Expected type '" + Token::StaticGetTypeString(i) + "'");}}
	void PassId(String s) {
		if (IsType(TextProc::TK_ID) && GetCurrent().GetString() == s)
			Next();
		else
			throw InputExc((String)"Expected id '" + s + "'");
	}
	
	bool IsId() const;
	bool IsInt() const;
	bool IsType(int i) const;
	
	int GetCurrentCursor() const {return GetCurrent().loc.cursor;}
	int GetCurrentLine() const {return GetCurrent().loc.line;}
	const char* GetCurrentInput() const {
		int cur = GetCurrent().loc.cursor;
		ASSERT(cur >= 0 && cur <= input.GetCount());
		return input.Begin() + cur;
	}
	void ThrowError(String msg) {throw TextProc::InputExc(msg);}
};
















Tokenizer::Tokenizer() {
	
}

protected Token& Tokenizer::Add(int token_id) {
	struct Token& t = tokens.Add();
	t.loc = loc;
	t.end = loc;
	t.end.col++;
	t.type = token_id;
	return t;
}

/*Token& Tokenizer::Insert(int i, int type) {
	Token& t = tokens.Insert(i);
	t.type = type;
	return t;
}*/

void Tokenizer::PassToken(int tk) {
	if (!IsToken(tk)) throw InputExc("Unexpected token");
	pass_cursor++;
}

bool Tokenizer::IsToken(int tk) {
	if (pass_cursor >= tokens.GetCount()) return false;
	return tokens[pass_cursor].type == tk;
}

bool Tokenizer::TryPassToken(int tk) {
	if (!IsToken(tk)) return false;
	pass_cursor++;
	return true;
}

String Tokenizer::ReadString() {
	if (!IsToken(TK_STRING)) throw InputExc("Unexpected token");
	return tokens[pass_cursor++].str_value;
}

String Tokenizer::ReadId() {
	if (!IsToken(TK_ID)) throw InputExc("Unexpected token");
	return tokens[pass_cursor++].str_value;
}

int64 Tokenizer::ReadInt() {
	if (!IsToken(TK_INTEGER)) throw InputExc("Unexpected token");
	return StrInt64(tokens[pass_cursor++].str_value);
}

double Tokenizer::ReadDouble() {
	if (!IsToken(TK_DOUBLE) && !IsToken(TK_FLOAT)) throw InputExc("Unexpected token");
	return StrDbl(tokens[pass_cursor++].str_value);
}

bool Tokenizer::Load(String str, String path, int line) {
	input = str;
	
	loc.file = path;
	loc.line = line;
	loc.col = 1;
	loc.cursor = 0;
	
	cursor = 0;
	
	while (cursor < input.GetCount()) {
		int chr = input[cursor];
		
		if (IsAlpha(chr) || chr == '_') {
			Token& t = Add(TK_ID);
			t.str_value.Cat(chr);
			Next();
			while (cursor < input.GetCount()) {
				int chr = input[cursor];
				if (IsAlpha(chr) || chr == '_' || IsDigit(chr)) {
					t.str_value.Cat(chr);
					Next();
				}
				else
					break;
			}
			t.end = loc;
		}
		else if (IsDigit(chr)) {
			String n;
			if (skip_separateunary && tokens.GetCount()) {
				while (tokens.GetCount() && tokens.Top().IsType(TK_MINUS)) {
					tokens.Pop();
					n.Cat('-');
				}
				while (tokens.GetCount() && tokens.Top().IsType(TK_PLUS)) {
					tokens.Pop();
				}
			}
			Token& tk = Add(TK_INTEGER);
			bool is_double = false; bool is_float = false;
			n.Cat(chr);
			Next();
			int exp;
			if (chr == '0')		exp = FP_OCTHEX;
			else				exp = FP_INT;
			while (cursor < input.GetCount()) {
				int chr = input[cursor];
				bool cat = false;
				
				if (exp == FP_INT) {
					if (IsDigit(chr))
						cat = true;
					else if (chr == '.') {
						exp = FP_FRAC;
						cat = true;
						is_double = true;
					}
					else if (chr == 'e' || chr == 'E') {
						exp = FP_SIGN;
						cat = true;
						is_double = true;
					}
				}
				else if (exp == FP_FRAC) {
					if (IsDigit(chr))
						cat = true;
					else if (chr == 'e' || chr == 'E') {
						exp = FP_SIGN;
						cat = true;
						is_double = true;
					}
				}
				else if (exp == FP_SIGN) {
					if (chr == '+' || chr == '-' || IsDigit(chr)) {
						exp = FP_EXP;
						cat = true;
					}
					else if (chr == 'f' || chr == 'F') {
						exp = FP_END;
						cat = true;
						is_float = true;
					}
				}
				else if (exp == FP_EXP) {
					if (IsDigit(chr))
						cat = true;
					else if (chr == 'f' || chr == 'F') {
						exp = FP_END;
						cat = true;
						is_float = true;
					}
				}
				else if (exp == FP_OCTHEX) {
					if (chr == 'b' || chr == 'B') {
						exp = FP_BIN;
						cat = true;
					}
					else if (chr == 'x' || chr == 'X') {
						exp = FP_HEX;
						cat = true;
					}
					else if (chr >= '0' && chr <= '7') {
						exp = FP_OCT;
						cat = true;
					}
					else if (chr == '.') {
						exp = FP_FRAC;
						cat = true;
						is_double = true;
					}
				}
				else if (exp == FP_HEX) {
					if ((chr >= '0' && chr <= '9') ||
						(chr >= 'a' && chr <= 'f') ||
						(chr >= 'A' && chr <= 'F')) {
						cat = true;
					}
				}
				else if (exp == FP_OCT) {
					if (chr >= '0' && chr <= '7') {
						cat = true;
					}
				}
				
				if (cat) {
					Next();
					n.Cat(chr);
					if (exp == FP_END) break;
				}
				else break;
			}
			
			tk.str_value = n;
			
			if      (exp == FP_BIN)		tk.type = TK_BIN;
			else if (exp == FP_HEX)		tk.type = TK_HEX;
			else if (exp == FP_OCT)		tk.type = TK_OCT;
			else if (is_double) {
				if (!is_float)
					tk.type = TK_DOUBLE;
				else
					tk.type = TK_FLOAT;
			}
			
			tk.end = loc;
		}
		else if (chr == '!') {
			Token& tk = Add(TK_EXCLAMATION);
			Next();
			tk.end = loc;
		}
		else if (chr == '\"') {
			Token& tk = Add(TK_STRING);
			int begin_line = loc.line;
			int begin_col = loc.col;
			Next();
			String str;
			bool success = false;
			while (cursor < input.GetCount()) {
				int chr = input[cursor];
				String tmp;
				tmp.Cat(chr);
				if (chr == '\n') {
					AddError(tk.loc, "no newline allowed in string literal");
					Next();
					loc.line++;
					loc.col = 1;
				}
				else if (chr == '\"') {
					Next();
					success = true;
					break;
				}
				else if (chr == '\\') {
					AppendString(str);
				}
				else {
					str.Cat(chr);
					Next();
				}
			}
			tk.end = loc;
			
			if (success) {
				tk.str_value = str;
			}
			else {
				AddError(tk.loc, "no finishing \" in string literal");
				return false;
			}
		}
		else if (chr == '#') {
			Token& tk = Add(TK_NUMBERSIGN);
			Next();
			tk.end = loc;
		}
		else if (chr == '%') {
			Token& tk = Add(TK_PERCENT);
			Next();
			tk.end = loc;
		}
		else if (chr == '&') {
			Token& tk = Add(TK_AMPERSAND);
			Next();
			tk.end = loc;
		}
		else if (chr == '/') {
			int begin_line = loc.line;
			int begin_col = loc.col;
			int chr1;
			if (cursor+1 < input.GetCount())	chr1 = input[cursor+1];
			else								chr1 = 0;
			if (chr1 == '*') {
				Token* tk = NULL;
				if (!skip_comments)
					tk = &Add(TK_BLOCK_COMMENT);
				Next();
				Next();
				String c;
				bool succ = false;
				while (cursor < input.GetCount()) {
					chr = input[cursor];
					if (chr == '*') {
						if (cursor+1 < input.GetCount())	chr1 = input[cursor+1];
						else								chr1 = 0;
						if (chr1 == '/') {
							Next();
							Next();
							if (tk) tk->str_value = c;
							succ = true;
							break;
						}
						else c.Cat(chr);
					}
					else c.Cat(chr);
					Next();
				}
				if (tk) {
					tk->end = loc;
					if (!succ)
						AddError(tk->loc, "unterminated /* comment");
				}
			}
			else if (chr1 == '/') {
				Token* tk = NULL;
				if (!skip_comments)
					tk = &Add(TK_COMMENT);
				Next();
				Next();
				String c;
				while (cursor < input.GetCount()) {
					chr = input[cursor];
					if (chr == '\n') {
						if (tk) tk->str_value = c;
						break;
					}
					else c.Cat(chr);
					Next();
				}
				if (tk) tk->end = loc;
			}
			else {
				Token& tk = Add(TK_DIV);
				Next();
				tk.end = loc;
			}
		}
		else if (chr == '{') {
			Add(TK_BRACKET_BEGIN);
			Next();
		}
		else if (chr == '}') {
			Add(TK_BRACKET_END);
			Next();
		}
		else if (chr == '(') {
			Add(TK_PARENTHESIS_BEGIN);
			Next();
		}
		else if (chr == ')') {
			Add(TK_PARENTHESIS_END);
			Next();
		}
		else if (chr == '[') {
			Add(TK_SQUARE_BEGIN);
			Next();
		}
		else if (chr == ']') {
			Add(TK_SQUARE_END);
			Next();
		}
		else if (chr == '=') {
			Add(TK_ASS);
			Next();
		}
		else if (chr == '+') {
			Add(TK_PLUS);
			Next();
		}
		else if (chr == '?') {
			Add(TK_QUESTION);
			Next();
		}
		else if (chr == '\\') {
			Add(TK_SOLIDUS);
			Next();
		}
		else if (chr == '^') {
			Add(TK_ACCENT);
			Next();
		}
		else if (chr == '~') {
			Add(TK_TILDE);
			Next();
		}
		else if (chr == '*') {
			Add(TK_MUL);
			Next();
		}
		else if (chr == '@') {
			Add(TK_AT);
			Next();
		}
		else if (chr == '\'') {
			Token& tk = Add(TK_CHAR);
			Next();
			String str;
			bool success = false;
			while (cursor < input.GetCount()) {
				int chr = input[cursor];
				if (chr == '\n') {
					AddError(tk.loc, "no newline allowed in char literal");
					Next();
					loc.line++;
					loc.col = 1;
				}
				else if (chr == '\'') {
					Next();
					success = true;
					break;
				}
				else if (chr == '\\') {
					AppendString(str);
				}
				else {
					str.Cat(chr);
					Next();
				}
			}
			tk.end = loc;
			
			if (success) {
				tk.str_value = str;
			}
			else {
				AddError(tk.loc, "no finishing \' in char literal");
				return false;
			}
		}
		else if (chr == '-') {
			Add(TK_MINUS);
			Next();
		}
		else if (chr == ';') {
			Add(TK_SEMICOLON);
			Next();
		}
		else if (chr == ',') {
			Add(TK_COMMA);
			Next();
		}
		else if (chr == '.') {
			if (cursor+2 < input.GetCount() && input[cursor+1] == '.' && input[cursor+2] == '.') {
				Add(TK_3DOTS);
				Next();
				Next();
				Next();
			}
			else {
				Add(TK_PUNCT);
				Next();
			}
		}
		else if (chr == ':') {
			Add(TK_COLON);
			Next();
		}
		else if (chr == '<') {
			Add(TK_LESS);
			Next();
		}
		else if (chr == '>') {
			Add(TK_GREATER);
			Next();
		}
		else if (chr == '|') {
			Add(TK_OR);
			Next();
		}
		else if (chr == '\n') {
			if (!skip_newlines) {
				Token& tk = Add(TK_NEWLINE);
				tk.end.col = 1; tk.end.line++;
			}
			Next();
			loc.line++;
			loc.col = 1;
		}
		else if (chr == '\t') {
			if (!tokens.IsEmpty())
				tokens.Top().spaces += tab_size;
			Next();
			loc.col += tab_size - 1;
		}
		else if (IsSpace(chr)) {
			if (!tokens.IsEmpty())
				tokens.Top().spaces++;
			Next();
		}
		else if (chr == 0)
			break;
		else {
			byte b = chr;
			if (b >= 0x80 && b <= 0xFF) {
				Next();
				while (cursor < input.GetCount()) {
					b = input[cursor];
					if (b >= 0x80 && b <= 0xFF)
						cursor++;
					else
						break;
				}
				//AddWarning("treating Unicode character as whitespace", line, col);
				if (!tokens.IsEmpty())
					tokens.Top().spaces++;
			}
			else {
				String msg = "unexpected character '";
				msg.Cat(chr);
				msg.Cat('\'');
				AddError(loc, msg);
				Next();
			}
		}
	}
	Add(TK_EOF);
	
	return messages.IsEmpty();
}

protected void Tokenizer::AppendString(String& s) {
	int chr = input[cursor];
	if (chr == '\\') {
		int chr1;
		if (cursor+1 < input.GetCount())	chr1 = input[cursor+1];
		else								chr1 = 0;
		if (chr1 == '\'') {
			Next(); Next();
			s.Cat(0x27);
		}
		else if (chr1 == '\"') {
			Next(); Next();
			s.Cat(0x22);
		}
		else if (chr1 == '?') {
			Next(); Next();
			s.Cat(0x3F);
		}
		else if (chr1 == '\\') {
			Next(); Next();
			s.Cat(0x5c);
		}
		else if (chr1 == 'a') {
			Next(); Next();
			s.Cat(0x07);
		}
		else if (chr1 == 'b') {
			Next(); Next();
			s.Cat(0x08);
		}
		else if (chr1 == 'f') {
			Next(); Next();
			s.Cat(0x0c);
		}
		else if (chr1 == 'n') {
			Next(); Next();
			s.Cat(0x0a);
		}
		else if (chr1 == 'r') {
			Next(); Next();
			s.Cat(0x0d);
		}
		else if (chr1 == 't') {
			Next(); Next();
			s.Cat(0x09);
		}
		else if (chr1 == 'v') {
			Next(); Next();
			s.Cat(0x0b);
		}
		else {
			s.Cat(chr);
			Next();
		}
	}
	else {
		s.Cat(chr);
		Next();
	}
}












void CBase::Load(String input, String src_name, const Vector<Token>& tokens) {
	this->input = input;
	this->src_name = src_name;
	this->tokens = &tokens;
	pos = 0;
}

const Token& CBase::GetCurrent() const {
	if (!tokens)
		throw InputExc("No token vector set");
	if (pos < 0 || pos >= tokens->GetCount())
		throw InputExc("Invalid token position");
	return (*tokens)[pos];
}

void CBase::IgnoreNewline(bool b) {
	ignore_newline = b;
}

bool CBase::IsEnd() const {
	return !tokens || pos >= tokens->GetCount();
}

FileLocation CBase::GetLocation() const {
	return GetCurrent().loc;
}

String CBase::ReadId() {
	const Token& tk = GetCurrent();
	if (!tk.IsType(TK_ID))
		throw InputExc("Token is not id");
	pos++;
	return tk.str_value;
}

int CBase::ReadInt() {
	const Token& tk = GetCurrent();
	pos++;
	if (tk.IsType(TextProc::TK_BIN))		return BinInt(tk.str_value);
	if (tk.IsType(TextProc::TK_OCT))		return OctInt(tk.str_value);
	if (tk.IsType(TextProc::TK_HEX))		return HexInt(tk.str_value);
	if (tk.IsType(TextProc::TK_INTEGER))	return StrInt(tk.str_value);
	pos--;
	throw InputExc("Token is not int");
}

void CBase::PassNewline() {
	const Token& tk = GetCurrent();
	if (tk.IsType(TK_NEWLINE))
		throw InputExc("Token is not newline");
	pos++;
}

bool CBase::Id(String id) {
	const Token& tk = GetCurrent();
	if (tk.IsType(TK_ID) && tk.str_value == id) {
		pos++;
		return true;
	}
	return false;
}

bool CBase::Type(int i) {
	const Token& tk = GetCurrent();
	if (tk.IsType(i)) {
		pos++;
		return true;
	}
	return false;
}

bool CBase::Newline() {
	const Token& tk = GetCurrent();
	if (tk.IsType(TK_NEWLINE)) {
		pos++;
		return true;
	}
	return false;
}

bool CBase::IsId() const {
	return GetCurrent().IsType(TK_ID);
}

bool CBase::IsInt() const {
	return GetCurrent().IsType(TK_INTEGER);
}

bool CBase::IsType(int i) const {
	return GetCurrent().IsType(i);
}

}


#define CParser			TextProc::CBase
#define Pos				TextProc::Pos
