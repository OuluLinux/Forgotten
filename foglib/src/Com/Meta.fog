
//auto number M_PI		= 3.141592654;
//auto number M_2PI		= 6.283185307;

auto character to_character(token t) { $t }
auto identifier to_identifier(token t) { $t }
auto identifier id_from_str(string t) { $t }
auto number to_number(token t) { $t }
auto string to_string(token t) { $t }
auto type to_type(token t) { $t }


auto string PLATFORM	= "UNKNOWN";
auto number CPU_32		= 0;
auto number CPU_64		= 0;
auto number PTRSIZE		= 0;

#define flagWIN32	0
#define flagPOSIX	0
#define flagCPU64	0
#define flagCPU32	0
#if WIN32
	#undef flagWIN32
	#define flagWIN32	1
#else
#if POSIX
	#undef flagPOSIX
	#define flagPOSIX	1
#endif
#if CPU32
	#undef flagCPU32
	#define flagCPU32	1
#endif
#if CPU64
	#undef flagCPU64
	#define flagCPU64	1
#endif


auto statement DebugMetaLog(string s) {auto if (true) auto $std::diagnostic($s);};


auto if (flagCPU64) {
	$DebugMetaLog("Using 64bit cpu");
	
	auto CPU_64 = 1;
	auto PTRSIZE = 8;
}
else auto if (flagCPU32) {
	$DebugMetaLog("Using 32bit cpu");
	
	auto CPU_64 = 1;
	auto PTRSIZE = 4;
}
else $std::error("Define cpu bits: CPU32 or CPU64");

auto if (flagPOSIX) {
	$DebugMetaLog("Using Posix OS");
	
	auto string DIR_SEPS = "/";
	auto char DIR_SEP = '/';
	auto string ENDL = "\n";
	auto PLATFORM = "POSIX";
}
else auto if (flagWIN32) {
	$DebugMetaLog("Using Windows OS");
	
	auto string DIR_SEPS = "\\";
	auto char DIR_SEP = '\\';
	auto string ENDL = "\r\n";
	auto PLATFORM = "WIN32";
}
else
	$std::error("No OS defined. Define POSIX or WIN32");





auto declaration Tuple2(identifier cls, identifier a, identifier b) {
	struct ::${Scope}:: $cls {
		$a a;
		$b b;
		
		Text::String AsString() const {return Text::ToString(a) + ", " + Text::ToString(b);}
	};
}

auto declaration Tuple3(identifier cls, identifier a, identifier b, identifier c) {
	struct  ::${Scope}:: $cls {
		$a a;
		$b b;
		$c c;
		
		Text::String AsString() const {return Text::ToString(a) + ", " + Text::ToString(b) + ", " + Text::ToString(c);}
	};
}

auto declaration RefTuple2(identifier cls, identifier a, identifier b) {
	struct ::${Scope}:: $cls {
		$a& a;
		$b& b;
		
		${cls}($a& a, $b& b) : a(a), b(b) {}
		Text::String AsString() const {return Text::ToString(a) + ", " + Text::ToString(b);}
	};
}

auto declaration RefTuple3(identifier cls, identifier a, identifier b, identifier c) {
	struct ::${Scope}:: $cls {
		$a& a;
		$b& b;
		$c& c;
		
		${cls}($a& a, $b& b, $c& c) : a(a), b(b), c(c) {}
		String AsString() const {return Text::ToString(a) + ", " + Text::ToString(b) + ", " + Text::ToString(c);}
	};
}

auto declaration AddRefCounter(identifier Class) {
	class $Class {
		private Lang::AtomicInt refs;
		public !inline int GetRefs() const { return refs; }
		public !inline void Inc() { refs++; }
		public !inline void Dec() { refs--; if (refs <= 0) delete this; }
	};
}

auto declaration ZeroFunction() {
	!inline void Zero() {Lang::Memory::Set(this, 0, sizeof(${Scope}));}
}


auto statement MainClass(token AppClass) {
	
	// Indirect including of the main class.
	// This requires that the MainClass is in Main namespace.
	// You create a dummy global object, which 'requires' the Main interface,
	// which makes the Main.hxx to be included in Global.hxx.
	struct NamespaceInterfaceLinker {
		export/interface Main;
		export/implementation Main;
		
	};
	NamespaceInterfaceLinker loader;
	
	
	extern "C" !inline int main(int argc, const char** argv) {
		Util::Env& e = Util::Env::Local();
		e.Init(argc, argv);
		Main::${AppClass}().Run();
		return e.Deinit();
	};
}

auto statement MainClassApp() {$MainClass(App);}

auto declaration MakeMoveable() {
	auto bool is_moveable = true;
}

auto declaration AssertMoveable(identifier id) {
	// TODO
	//auto if ($Scope.is_moveable == false)
	//	$std.error("The class is not set as moveable");
}

auto declaration ForceGlobalVisible(token t) {
	extern typename $t $to_identifier("____unused_"$t);
}

auto declaration GlobalTypedef(token from, token to) {
	typedef $from $to;
	extern $to_identifier($to) $to_identifier("____unused_"$to);
}

auto declaration MakeVectorPtr(identifier Type, identifier postfix, identifier DynArrayVar) {
	${Type}& Get${postfix}(int i) {return *(${Type}*)${DynArrayVar}[i];}
	void Remove${postfix}(int i) {${DynArrayVar}.Remove(i);}
	int Get${postfix}Count() {return ${DynArrayVar}.GetCount();}
	void Add${postfix}(${Type}* ptr) {${DynArrayVar}.Add(ptr);}
}

auto declaration MakeClassPtr(identifier Type, identifier postfix, identifier PtrVar) {
	${Type}& Get${postfix}() {return *(${Type}*)${PtrVar};}
	void Clear${postfix}(int i) {${PtrVar} = 0;}
	void Set${postfix}(${Type}* ptr) {${PtrVar} = ptr;}
}
