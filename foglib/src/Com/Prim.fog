
namespace Prim {


template<class T> inline struct CRef {
	T& value;
	
	
	CRef() : value(0) {}
	CRef(T& r) : value(r) {}
	CRef(const CRef& r) : value(r.value) {}
	operator T&() const {return value;}
	T& Get() const {return value;}
	bool operator==(const CRef& p) const {return &value == &p.value;}
};

template<class T> inline struct CPtr {
	T* value;
	
	
	CPtr() : value(0) {}
	CPtr(T* p) : value(p) {}
	void operator=(T* p) {value = p;}
	operator T*() const {return value;}
	bool operator==(const CPtr& p) const {return value == p.value;}
	bool operator==(void* p) const {return (void*)value == p;}
	
	auto if (flagCPU64)
		unsigned long long Int() const {return (unsigned long long)value;}
	else
		unsigned long Int() const {return (unsigned long)value;}
};


template<class T> T InlineIf(bool cond, T a, T b) {
	if (cond)
		return a;
	else
		return b;
};


}

#define CRef			Prim::CRef
#define CPtr			Prim::CPtr
#define InlineIf		Prim::InlineIf
