namespace Shell {
using/interface Lang;

#define LTIMING(x)

/////////////// BUILTIN

EscValue EscFromStdValue(const Value& v)
{
	EscValue r;
	Time t;
	int64 i64;
	if(!IsNull(v))
		switch(v.GetType()) {
		case Interface::BOOL_V:
			i64 = v.Get<bool>();
			r = i64;
			break;
		case Interface::INT_V:
			i64 = v.Get<int>();;
			r = i64;
			break;
		case Interface::INT64_V:
			r = v.Get<int64>();
			break;
		case Interface::DOUBLE_V:
			r = v.Get<double>();
			break;
		case Interface::STRING_V:
			r = ToWString(v.Get<String>());
			break;
		case Interface::WSTRING_V:
			r = v.Get<WString>();
			break;
		case Interface::TIME_V:
			t = v;
			r.MapSet("hour", t.hour);
			r.MapSet("minute", t.min);
			r.MapSet("second", t.sec);
		case Interface::DATE_V:
			t = v;
			r.MapSet("year", t.year);
			r.MapSet("month", t.month);
			r.MapSet("day", t.day);
			break;
		case Interface::VALUEARRAY_V:
			ValueArray va = v;
			r.SetEmptyArray();
			for(int i = 0; i < va.GetCount(); i++)
				r.ArrayAdd(EscFromStdValue(va[i]));
		}
	return r;
}

Value StdValueFromEsc(const EscValue& v)
{
	if(v.IsNumber())
		return AsValue(v.GetNumber());
	if(v.IsArray())
		return AsValue(v.GetWString());
	if(IsTime(v))
		return AsValue(Time(
			v.GetFieldInt("year"), v.GetFieldInt("month"), v.GetFieldInt("day"),
			v.GetFieldInt("hour"), v.GetFieldInt("minute"), v.GetFieldInt("second")));
	if(IsDate(v))
		return AsValue(Date(
			v.GetFieldInt("year"), v.GetFieldInt("month"), v.GetFieldInt("day")));
	return Value();
}

void SIC_StdFormat(EscEscapeRef e)
{
	e = StdValueFromEsc(e()[0]).AsString();
}

void StdValueLib(ArrayMap<String, EscValue>& global)
{
	Escape(global, "StdFormat(x)", SIC_StdFormat);
}










/////////////// STDLIB

void ESC_count(EscEscapeRef e)
{
	e = e()[0].GetCount();
}

void ESC_is_void(EscEscapeRef e)
{
	e = e()[0].IsVoid();
}

void ESC_is_number(EscEscapeRef e)
{
	e = e()[0].IsNumber();
}

void ESC_is_array(EscEscapeRef e)
{
	e = e()[0].IsArray();
}

void ESC_is_map(EscEscapeRef e)
{
	e = e()[0].IsMap();
}

void ESC_int(EscEscapeRef e)
{
	if (e()[0].IsNumber())
		e = (int)e()[0].GetNumber();
}

void ESC_to_string(EscEscapeRef e)
{
	e = e()[0].AsString();
}

void ESC_to_number(EscEscapeRef e)
{
	if (e()[0].IsArray()) {
		double d = StrDbl((String)e()[0]);
		if(!IsNull(d)) {
			if(FitsInInt64(d))
				e = StrInt64((String)e()[0]);
			else
				e = d;
		}
	}
}

void ESC_rand(EscEscapeRef e)
{
	e = (int)Random::Int();
}

void ESC_keys(EscEscapeRef e)
{
	e->CheckMap(0);
	EscValue v;
	const VectorMap<EscValue, EscValue>& m = e()[0].GetMap();
	for(int i = 0; i < m.GetCount(); i++)
		/*if(!m.IsUnlinked(i))*/
			v.ArrayAdd(m.GetKey(i));
	e = v;
}

void ESC_values(EscEscapeRef e)
{
	e->CheckMap(0);
	EscValue v;
	const VectorMap<EscValue, EscValue>& m = e()[0].GetMap();
	for(int i = 0; i < m.GetCount(); i++)
		/*if(!m.IsUnlinked(i))*/
			v.ArrayAdd(m[i]);
	e = v;
}

void ESC_reverse(EscEscapeRef e)
{
	e->CheckArray(0);
	const Vector<EscValue>& a = e()[0].GetArray();
	EscValue r;
	for(int i = a.GetCount() - 1; i >= 0; i--)
		r.ArrayAdd(a[i]);
	e = r;
}

struct EscCmp {
	Esc *esc;
	bool operator()(const EscValue& a, const EscValue& b) const {
		return esc->DoCompare(a, b, "< (sort)") < 0;
	}
};

void EscGetSortOrder(EscEscapeRef e, Vector<int>& so)
{
	e->CheckArray(0);
	const Vector<EscValue>& va = e()[0].GetArray();
	EscCmp cmp;
	cmp.esc = &e->esc;
	GetSortOrder(so, va, cmp);
}

void ESC_sort(EscEscapeRef e)
{
	Vector<int> so;
	EscGetSortOrder(e, so);
	EscValue r;
	for(int i = 0; i < so.GetCount(); i++)
		r.ArrayAdd (e()[0].ArrayGet(so[i]));
	e = r;
}

void ESC_order(EscEscapeRef e)
{
	Vector<int> so;
	EscGetSortOrder(e, so);
	EscValue r;
	for(int i = 0; i < so.GetCount(); i++)
		r.ArrayAdd(so[i]);
	e = r;
}

// ---------------------------

#define ESCBACK(x) MakeDynamicCallback1<EscEscapeRef>(THISBACK_1(x, EscEscapeRef))

void ESC_mid(EscEscapeRef e)
{
	e->CheckArray(0);
	int pos = e->Int(1);
	int count = e->Int(2);
	if(pos < 0 || pos + count > e()[0].GetCount())
		e->ThrowError("out of bounds in call to 'mid'");
	e->ret_val = e()[0].ArrayGet(pos, count);
}

void ESC_exists(EscEscapeRef e)
{
	e->CheckMap(0);
	e = !e()[0].MapGet (e()[1]).IsVoid();
}

struct ESC_FileOut : public EscHandle {
	FileOut file;
	void Put(EscEscapeRef e)         { if(file) file.PutByte(e->Int(0)); }
	void PutLine(EscEscapeRef e)     { if(file) file.PutLine(String(e()[0])); }
	void Close(EscEscapeRef e)       { if(file) file.Close(); }

	typedef ESC_FileOut CLASSNAME;

	ESC_FileOut(EscEscape& e, EscValue& v, int style) {
		file.Open(String (e[0]), style);
		v.Escape("Put(a)", this, ESCBACK(Put));
		v.Escape("PutLine(a)", this, ESCBACK(PutLine));
		v.Escape("Close()", this, ESCBACK(Close));
	}
};

void ESC_OpenFileOut(EscEscapeRef e)
{
	EscValue v;
	ESC_FileOut *f = new ESC_FileOut(e, v, FileOut::CREATE);
	if(f->file)
		e = v;
}

void ESC_OpenFileAppend(EscEscapeRef e)
{
	EscValue v;
	ESC_FileOut *f = new ESC_FileOut(e, v, FileOut::APPEND);
	if(f->file)
		e = v;
}

struct ESC_FileIn : public EscHandle {
	
	FileIn file;
	void IsEof(EscEscapeRef e)       { e = file.IsEof(); }
	void Get(EscEscapeRef e)         { e = file.GetByte(); }
	void GetLine(EscEscapeRef e)     { e = file.GetLine(); }
	void Close(EscEscapeRef e)       { if(file) file.Close(); }

	typedef ESC_FileIn CLASSNAME;

	ESC_FileIn(EscEscape& e, EscValue& v) {
		file.Open(String (e[0]));
		v.Escape("IsEof()", this, ESCBACK(IsEof));
		v.Escape("Get()", this, ESCBACK(Get));
		v.Escape("GetLine()", this, ESCBACK(GetLine));
		v.Escape("Close()", this, ESCBACK(Close));
	}
};

void ESC_OpenFileIn(EscEscapeRef e)
{
	EscValue v;
	ESC_FileIn *f = new ESC_FileIn(e, v);
	if(f->file)
		e = v;
}

// ---------------------------

bool IsDate(const EscValue& v)
{
	return v.HasNumberField("year") && v.HasNumberField("month") && v.HasNumberField("day");
}

bool IsTime(const EscValue& v)
{
	return IsDate(v) && v.HasNumberField("hour") && v.HasNumberField("minute") && v.HasNumberField("second");
}

void SIC_IsDate(EscEscapeRef e)
{
	e = IsDate (e()[0]);
}

void SIC_IsTime(EscEscapeRef e)
{
	e = IsTime (e()[0]);
}

void SIC_GetSysTime(EscEscapeRef e)
{
	Time tm = GetSysTime();
	EscValue v;
	v.MapSet("year", (int)tm.year);
	v.MapSet("month", (int)tm.month);
	v.MapSet("day", (int)tm.day);
	v.MapSet("hour", (int)tm.hour);
	v.MapSet("minute", (int)tm.min);
	v.MapSet("second", (int)tm.sec);
	e = v;
}

void ESC_ToLower(EscEscapeRef e)
{
	String s = e()[0];
	e = ToLower(s);
}

void ESC_ToUpper(EscEscapeRef e)
{
	String s = e()[0];
	e = ToUpper(s);
}

// ---------------------------

void ESC_replace(EscEscapeRef e)
{
	String str = e()[0];
	str.Replace (e()[1], e()[2]);
	e = str;
}

// ---------------------------

/*auto statement FN(identifier fn) {
	Escfn(global, $to_string($fn) "(value)", [](EscEscapeRef e) { e = fn (e()[0].GetNumber()); });
}*/

void StdLib(ArrayMap<String, EscValue>& global) {
	Escape(global, "is_number(value)", ESC_is_number);
	Escape(global, "is_array(value)", ESC_is_array);
	Escape(global, "is_map(value)", ESC_is_map);
	Escape(global, "is_void(value)", ESC_is_void);
	Escape(global, "int(value)", ESC_int);
	Escape(global, "to_string(value)", ESC_to_string);
	Escape(global, "to_number(value)", ESC_to_number);
	Escape(global, "count(value)", ESC_count);
	Escape(global, "keys(map)", ESC_keys);
	Escape(global, "values(map)", ESC_values);
	Escape(global, "rand()", ESC_rand);
	Escape(global, "reverse(array)", ESC_reverse);
	Escape(global, "sort(array)", ESC_sort);
	Escape(global, "order(array)", ESC_order);
	
	Escape(global, "replace(str, find, replace)", ESC_replace);
	
	Escape(global, "ToUpper(value)", ESC_ToUpper);
	Escape(global, "ToLower(value)", ESC_ToLower);
	
	Escape(global, "len(x)", ESC_count);
	Escape(global, "mid(array, pos, count)", ESC_mid);
	Escape(global, "exists(map, key)", ESC_exists);

	Escape(global, "OpenFileOut(x)", ESC_OpenFileOut);
	Escape(global, "OpenFileAppend(x)", ESC_OpenFileOut);
	Escape(global, "OpenFileIn(x)", ESC_OpenFileIn);

	Escape(global, "GetSysTime()", SIC_GetSysTime);
	Escape(global, "IsDate(x)", SIC_IsDate);
	Escape(global, "IsTime(x)", SIC_IsTime);

	
	
	/*$FN(sin)
	$FN(cos)
	$FN(tan)
	$FN(asin)
	$FN(acos)
	$FN(atan)

	$FN(sinh)
	$FN(cosh)
	$FN(tanh)
	$FN(asinh)
	$FN(acosh)
	$FN(atanh)
	
	$FN(exp)
	$FN(log)
	$FN(log10)
	$FN(exp2)
	$FN(log2)
	$FN(sqrt)
	$FN(cbrt)
	
	
	Escfn(global, "pow(base, exponent)", [](EscEscapeRef e) { e = pow (e()[0].GetNumber(), e()[1].GetNumber()); });
	Escfn(global, "atan2(a, b)", [](EscEscapeRef e) { e = atan2 (e()[0].GetNumber(), e()[1].GetNumber()); });
	*/
}


}

