namespace Lang {


//template <class T> struct LangPtr : public CPtr<T> {};

auto declaration GlobalTypedefPtr(token from, token to) {
	typedef CPtr<$from> $to;
	extern $to_identifier($to) $to_identifier("____unused_"$to);
}

$GlobalTypedef(unsigned char,		uint8);
$GlobalTypedef(char,				int8);
$GlobalTypedef(unsigned short,		uint16);
$GlobalTypedef(short,				int16);
$GlobalTypedef(unsigned int,		uint32);
$GlobalTypedef(int,					int32);
$GlobalTypedef(unsigned long long,	uint64);
$GlobalTypedef(long long,			int64);
$GlobalTypedef(unsigned char,		byte);
$GlobalTypedef(uint16,				word);
$GlobalTypedef(uint32,				dword);
$GlobalTypedef(uint64,				qword);
$GlobalTypedefPtr(const char,		CString);
$GlobalTypedefPtr(void,				VoidPtr);
$GlobalTypedefPtr(const void,		ConstVoidPtr);

//template<class T> inline void Destruct(T*& o) {o = 0;}
//template<class T> inline void Destruct(T& o) {o. ~  T ();}
template<class T> inline void Destruct(T& o) {o. ~ _1 ();}
inline void Destruct(uint8& o) {}
inline void Destruct(int8& o) {}
inline void Destruct(uint16& o) {}
inline void Destruct(int16& o) {}
inline void Destruct(uint32& o) {}
inline void Destruct(int32& o) {}
inline void Destruct(uint64& o) {}
inline void Destruct(int64& o) {}
inline void Destruct(float& o) {}
inline void Destruct(double& o) {}
inline void Destruct(void* o) {}


inline bool FitsInInt64(double x) {
	return x >= -9223372036854775808.0 && x < 9223372036854775808.0;
}

namespace Memory {
	
void* Alloc(int sz) :{ export/noimplementation; };
void Free(void* ptr) :{ export/noimplementation; };
int Compare(const void* m1, const void* m2, int sz) :{ export/noimplementation; };
void* Copy(void *dest, const void* src, int sz) :{ export/noimplementation; };
void* Move(void *dest, const void* src, int sz) :{ export/noimplementation; };
void Set(void *dest, int byte_value, int sz) :{ export/noimplementation; };
int StringCompare(const char* a, const char* b) :{ export/noimplementation; };

}

void SysBreak(const char* msg) :{ export/noimplementation; };

int StringLength(const char* c, int max_len=100000000) :{ export/noimplementation; };
int StringLength(const short* c, int max_len=100000000) :{ export/noimplementation; };

struct AtomicFlag {
	$MakeMoveable();
	
	void Enter() :{ export/noimplementation; };
	void Leave() :{ export/noimplementation; };
	bool TryEnter() :{ export/noimplementation; };
};

struct AtomicBool {
	$MakeMoveable();
	
	AtomicBool() :{ export/noimplementation; };
	AtomicBool(bool b) :{ export/noimplementation; };
	AtomicBool(const AtomicBool& ai) :{ export/noimplementation; };
	operator bool() :{ export/noimplementation; };
	bool operator = (bool b) :{ export/noimplementation; };
};

struct AtomicInt {
	$MakeMoveable();
	
	AtomicInt() :{ export/noimplementation; };
	AtomicInt(int i) :{ export/noimplementation; };
	AtomicInt(const AtomicInt& ai) :{ export/noimplementation; };
	operator int() const :{ export/noimplementation; };
	int operator = (int i) :{ export/noimplementation; };
	int operator++() :{ export/noimplementation; };
	int operator--() :{ export/noimplementation; };
	int operator++(int) :{ export/noimplementation; };
	int operator--(int) :{ export/noimplementation; };
};

struct ConditionalVar {
	
	ConditionalVar() :{ export/noimplementation; };
	void Wait() :{ export/noimplementation; };
	void SetReady(bool b=true) :{ export/noimplementation; };
	bool IsReady() const :{ export/noimplementation; };
	
};

#define ASSERT(e) {if (!(e)) {Lang::SysBreak("Assertion failed: " #e);}}
#define ASSERT_(e, msg) {if (!(e)) {Lang::SysBreak("Assertion failed: " msg);}}
#define PANIC(msg) Lang::SysBreak(msg);





auto declaration MakeCException(identifier Exc) {
	struct $Exc {
		const char* msg = 0;
		${Exc}() {}
		${Exc}(const char* s) : msg(s) {}
	};
}

$MakeCException(MemoryLimitExc);



auto declaration MakeIterator(bool is_const, bool is_ptr, identifier name, number step) {
	template <class K> class ${name} {
		public inline ${name}() {}
		public inline ${name}(const ${name}& it) {*this = it;}
		public inline void operator=(const ${name}& it) {kit = it.kit;}
		public inline ${name}<K>& operator++() {kit += $step; return *this;}
		public inline void operator--(int i) {kit -= $step;}
		public inline void operator+=(int i) {kit += i;}
		
		auto if ($is_const) {
			public typedef const K ConstK;
			auto if ($is_ptr) {
				const K** kit;
				public inline ${name}(const K** kit) : kit(kit) {}
				public inline const K* Get() const {return *kit;}
			} else {
				const K* kit;
				public inline ${name}(const K* kit) : kit(kit) {}
				public inline const K* Get() const {return kit;}
			}
			public inline const K* operator->() const {return Get();}
			public inline operator ConstK*() const {return Get();}
			public inline const K& operator*() const {return *Get();}
			public inline const K& operator()() const {return *Get();}
			public inline bool operator!=(const ${name}& it) const {return it.kit != kit;}
		} else {
			auto if ($is_ptr) {
				K** kit;
				public inline ${name}(K** kit) : kit(kit) {}
				public inline K* Get() const {return *kit;}
				public inline K*& Ref() {return *kit;}
			} else {
				K* kit;
				public inline ${name}(K* kit) : kit(kit) {}
				public inline K* Get() const {return kit;}
			}
			public inline K* operator->() const {return Get();}
			public inline operator K*() const {return Get();}
			public inline K& operator*() const {return *Get();}
			public inline K& operator()() const {return *Get();}
			public inline bool operator!=(const ${name}& it) const {return it.kit != kit;}
		}
	};
}

$MakeIterator(0, 0, FwdIterator, +1);
$MakeIterator(0, 0, BwdIterator, -1);
$MakeIterator(1, 0, ConstFwdIterator, +1);
$MakeIterator(1, 0, ConstBwdIterator, -1);
$MakeIterator(0, 1, FwdPtrIterator, +1);
$MakeIterator(0, 1, BwdPtrIterator, -1);
$MakeIterator(1, 1, ConstFwdPtrIterator, +1);
$MakeIterator(1, 1, ConstBwdPtrIterator, -1);


auto declaration MakePairIterator(bool is_const, bool is_ptr, identifier name, number step) {
	template <class K, class V> class ${name} {
		public inline ${name}() {}
		public inline ${name}(const ${name}& it) {*this = it;}
		public inline void operator=(const ${name}& it) {kit = it.kit; vit = it.vit;}
		public inline ${name}<K,V>& operator++() {kit += $step; vit += $step; return *this;}
		public inline void operator--(int i) {kit -= $step; vit -= $step;}
		public inline void operator+=(int i) {kit += i; vit += i;}
		
		auto if ($is_const) {
			typedef const K ConstK;
			typedef const V ConstV;
			const K* kit;
			public inline const K& GetKey() const {return *kit;}
			public inline bool operator!=(const ${name}& it) const {return it.kit != kit;}
			auto if ($is_ptr) {
				const V* vit;
				public inline ${name}(const K* kit, const V* vit) : kit(kit), vit(vit) {}
				public inline const V& GetValue() const {return *vit;}
			}
			else {
				const V** vit;
				public inline ${name}(const K* kit, const V** vit) : kit(kit), vit(vit) {}
				public inline const V& GetValue() const {return **vit;}
			}
		}
		else {
			const K* kit;
			const K& GetKey() const {return *kit;}
			public inline bool operator!=(const ${name}& it) const {return it.kit != kit;}
			auto if ($is_ptr) {
				V** vit;
				public inline ${name}(const K* kit, V** vit) : kit(kit), vit(vit) {}
				public inline V& GetValue() const {return **vit;}
			}
			else {
				V* vit;
				public inline ${name}(const K* kit, V* vit) : kit(kit), vit(vit) {}
				public inline V& GetValue() const {return *vit;}
			}
		}
	};
}

$MakePairIterator(0, 0, FwdPairIterator, +1);
$MakePairIterator(0, 0, BwdPairIterator, -1);
$MakePairIterator(1, 0, ConstFwdPairIterator, +1);
$MakePairIterator(1, 0, ConstBwdPairIterator, -1);
$MakePairIterator(0, 1, FwdPairPtrIterator, +1);
$MakePairIterator(0, 1, BwdPairPtrIterator, -1);
$MakePairIterator(1, 1, ConstFwdPairPtrIterator, +1);
$MakePairIterator(1, 1, ConstBwdPairPtrIterator, -1);


template <class K>
inline class DynArray {
	typedef unsigned long long uint64;
	auto int MAX_SIZE = 2000000000;
	
	K* data = NULL;
	int reserved = 0;
	int count = 0;


	inline void IncreaseReserved() {
		uint64 new_reserved = 1;
		while (new_reserved <= reserved)
			new_reserved <<= 1;
		if (new_reserved >= $MAX_SIZE)
			new_reserved = $MAX_SIZE;
		Reserve((int)new_reserved);
	}
	
	inline void Pick0(DynArray& v) { data = v.data; v.data = 0; reserved = v.reserved; v.reserved = 0; count = v.count; v.count = 0; }
	
public:
	
	typedef K Unit;
	typedef const K ConstUnit;
	typedef K IndirectK;
	typedef const K ConstK;
	typedef DynArray<K> DynArrayK;
	typedef ConstFwdIterator<K> ConstIterator;
	typedef ConstBwdIterator<K> ConstRIterator;
	typedef FwdIterator<K> Iterator;
	typedef BwdIterator<K> RIterator;
	
	inline DynArray() {}
	inline DynArray(const DynArray& v) {*this <<= v;}
	inline DynArray(int i) {SetCount(i);}
	inline ~DynArray() {
		Clear();
		return;
		$AssertMoveable(K);  // T must be moveable
	}
	
	//void Serialize(StreamBase& s);
	//void operator=(const Pick<DynArray>& pick) {Clear(); DynArray& v = pick.Get(); Swap(data, v.data); Swap(reserved, v.reserved); Swap(count, v.count);}
	//void operator=(DynArray&& v) {Pick0(v);}
	
	
	inline Lang::FwdIterator<K>			Begin()			{return Iterator(data);}
	inline Lang::FwdIterator<K>			End()			{return Iterator(data+count);}
	inline Lang::ConstFwdIterator<K>	Begin() const	{return ConstIterator(data);}
	inline Lang::ConstFwdIterator<K>	End() const		{return ConstIterator(data+count);}
	inline Lang::FwdIterator<K>			begin()			{return Begin();}
	inline Lang::FwdIterator<K>			end()			{return End();}
	inline Lang::ConstFwdIterator<K>	begin() const	{return Begin();}
	inline Lang::ConstFwdIterator<K>	end() const		{return End();}
	inline Lang::BwdIterator<K>			RBegin()		{return RIterator(data+count-1);}
	inline Lang::BwdIterator<K>			REnd()			{return RIterator(data-1);}
	inline Lang::ConstBwdIterator<K>	RBegin() const	{return ConstRIterator(data+count-1);}
	inline Lang::ConstBwdIterator<K>	REnd() const	{return ConstRIterator(data-1);}
	inline Lang::BwdIterator<K>			rbegin()		{return RBegin();}
	inline Lang::BwdIterator<K>			rend()			{return REnd();}
	inline Lang::ConstBwdIterator<K>	rbegin() const	{return RBegin();}
	inline Lang::ConstBwdIterator<K>	rend() const	{return REnd();}
	
	inline K* Get() const {return data;}
	inline K* GetEnd() const {return data + count;}
	
	inline K& Add() {
		if (count + 1 > reserved) IncreaseReserved();
		if (count >= reserved)
			throw MemoryLimitExc("DynArray maximum size exceeded");
		new (&data[count]) K();
		return data[count++];
	}
	inline K& Add(const K& v) {
		if (count + 1 > reserved) IncreaseReserved();
		if (count >= reserved)
			throw MemoryLimitExc("DynArray maximum size exceeded");
		K* ptr = &data[count];
		new (ptr) K (v);
		return data[count++];
	}
	/*K& AddPick(const Pick<K>& v) {
		if (count + 1 > reserved) IncreaseReserved();
		if (count >= reserved)
			throw MemoryLimitExc("DynArray maximum size exceeded");
		new (&data[count]) IndirectK (v);
		return data[count++];
	}*/
	inline DynArray<K>& operator<<(const K& v) { Add(v); return *this; }

	inline void SetCount(int new_count) {
		ASSERT(new_count >= 0);
		if (new_count < 0) return;
		if (new_count > reserved) Reserve(new_count);
		if (new_count == count) return;
		if (new_count > count) {
			for (int i = count; i < new_count; i++)
				new (&data[i]) K();
		}
		else {
			for (int i = count - 1; i >= new_count; i--)
				Destruct(data[i]);
				//data[i].~K();
		}
		count = new_count;
	}
	inline void SetCount(int new_count, ConstK& value) {
		ASSERT(new_count >= 0);
		if (new_count < 0) return;
		if (new_count > reserved) Reserve(new_count);
		if (new_count == count) return;
		if (new_count > count) {
			for (int i = count; i < new_count; i++)
				new (&data[i]) K(value);
		}
		else {
			for (int i = count - 1; i >= new_count; i--)
				Destruct(data[i]);
		}
		count = new_count;
	}
	inline void operator<<=(const DynArray& a) {
		SetCount(0);
		Reserve(a.GetCount());
		for (int i = 0; i < a.GetCount(); i++)
			new (&data[i]) K(a[i]);
		count = a.GetCount();
	}
	inline void Append(const DynArray& a) {
		int begin = count;
		int new_count = count + a.GetCount();
		Reserve(new_count);
		for (int i = begin, j = 0; i < new_count; i++, j++)
			new (&data[i]) K(a[j]);
		count = new_count;
	}
	inline void Append(const DynArray& a, int i, int n) {
		ASSERT(i >= 0 && i < a.GetCount() && n >= 0 && i+n <= a.GetCount());
		if (n <= 0) return;
		i = Max(0, Min(a.GetCount()-1, i));
		if (i >= a.GetCount()) return;
		n = Min(n, a.GetCount()-i);
		int begin = count;
		int new_count = count + n;
		Reserve(new_count);
		for (int k = begin, j = i; k < new_count; k++, j++)
			new (&data[k]) K(a[j]);
		count = new_count;
	}
	inline void IncreaseReserve(int more_reserved) {Reserve(GetCount() + more_reserved);}
	inline void Reserve(int new_reserved) {
		if (new_reserved <= reserved || new_reserved <= 0)
			return;
		K* new_data = (K*)Memory::Alloc(new_reserved * sizeof(K));
		if (data) {
			if (count > 0)
				Memory::Copy((void*)new_data, (void*)data, sizeof(K) * count);
			Memory::Free(data);
		}
		data = new_data;
		reserved = new_reserved;
	}
	inline int GetCount() const { return count; }
	inline int GetReserved() const { return reserved; }
	inline bool IsEmpty() const { return GetCount() == 0; }

	inline K& At(int i) {
		ASSERT(i >= 0 && i < count);
		return *(data + i);
	}
	inline const K& At(int i) const {
		ASSERT(i >= 0 && i < count);
		return *(data + i);
	}

	inline K& operator[](int i) {return At(i);}
	inline const K& operator[](int i) const {return At(i);}

	inline void Remove(int i) {
		ASSERT(i >= 0 && i < count);
		int tail = count - (i + 1);
		if (tail > 0)
			Memory::Move(data + i, data + i + 1, tail * sizeof(K));
		count--;
	}
	inline void Remove(int i, int count) {
		ASSERT(count > 0);
		ASSERT(i >= 0 && i + count <= this->count);
		int tail = this->count - (i + count);
		if (tail > 0)
			Memory::Move(data + i, data + i + count, tail * sizeof(K));
		this->count -= count;
	}
	inline void Remove(const Iterator& it) {
		K* begin = data;
		K* cur = it.Get();
		int pos = cur - begin;
		Remove(pos);
		// TODO: Check this
	}
	inline void Remove(const Iterator& it, const Iterator& end) {
		K* begin = data;
		K* cur = it.Get();
		K* cur_end = end.Get();
		int pos0 = cur - begin;
		int pos1 = cur_end - begin;
		int len = pos1 - pos0;
		if (!len) return;
		Remove(pos0, len);
		// TODO: Check this
	}
	inline void Remove(const DynArray<int>& sorted_list) {Remove(sorted_list.Begin(), sorted_list.GetCount());}
	inline void Remove(const int* sorted_list, int n) {
		if(!n) return;
		int pos = *sorted_list;
		int npos = pos;
		for(;;) {
			ASSERT(pos < count);
			if(pos == *sorted_list) {
				Destruct(*(data + pos));
				pos++;
				sorted_list++;
				if(--n == 0) break;
				ASSERT(*sorted_list >= pos);
			}
			else
				Memory::Copy(data + npos++, data + pos++, sizeof(K));
		}
		while(pos < count)
			Memory::Copy(data + npos++, data + pos++, sizeof(K));
		count = npos;
	}
	inline void InsertN(int i, int n) {
		if (n <= 0) return;
		if (count + n > reserved) Reserve(count + n);
		if (count + n > reserved)
			throw MemoryLimitExc("DynArray maximum size exceeded");
		int tail = this->count - i;
		if (tail > 0)
			Memory::Move(data + i + 1, data + i, tail * sizeof(K));
		for(int j = 0; j < n; j++)
			new (&data[i + j]) K();
		count += n;
	}
	inline K& Insert(int i) {
		if (count + 1 > reserved) IncreaseReserved();
		if (count + 1 > reserved)
			throw MemoryLimitExc("DynArray maximum size exceeded");
		int tail = this->count - i;
		if (tail > 0)
			Memory::Move(data + i + 1, data + i, tail * sizeof(K));
		new (&data[i]) K();
		count++;
		return data[i];
	}
	inline K& Insert(int i, ConstK& key) {
		if (count + 1 > reserved) IncreaseReserved();
		if (count + 1 > reserved)
			throw MemoryLimitExc("DynArray maximum size exceeded");
		int tail = this->count - i;
		if (tail > 0)
			Memory::Move(data + i + 1, data + i, tail * sizeof(K));
		new (&data[i]) K(key);
		count++;
		return data[i];
	}

	inline K& Top() { ASSERT(GetCount() > 0); return data[count - 1]; }

	inline K Pop() {
		ASSERT(GetCount() > 0);
		int i = count - 1;
		K ret(data[i]);
		Destruct(data[i]);
		count--;
		return ret;
	}
	
	inline void RemoveLast() {
		ASSERT(GetCount() > 0);
		data[--count].~K();
	}

	inline void Clear() {
		if (!reserved) return;
		K* it = data;
		K* end = data + count;
		while (it != end)
			it++->~IndirectK();
		count = 0;
		Memory::Free(data);
		data = NULL;
		reserved = 0;
	}
};




template <class T>
inline int NumberCompare__(const T& a, const T& b)
{
	if(a < b) return -1;
	if(a > b) return 1;
	return 0;
}

template<class T> inline int SgnCompare(const T& a, const T& b) {return a.Compare(b);}

inline int SgnCompare(const char& a, const char& b)                     { return NumberCompare__<char>(a, b); }
inline int SgnCompare(const signed char& a, const signed char& b)       { return NumberCompare__<char>(a, b); }
inline int SgnCompare(const unsigned char& a, const unsigned char& b)   { return NumberCompare__<unsigned char>(a, b); }
inline int SgnCompare(const short& a, const short& b)                   { return NumberCompare__<short>(a, b); }
inline int SgnCompare(const unsigned short& a, const unsigned short& b) { return NumberCompare__<unsigned short>(a, b); }
inline int SgnCompare(const int& a, const int& b)                       { return NumberCompare__<int>(a, b); }
inline int SgnCompare(const unsigned int& a, const unsigned int& b)     { return NumberCompare__<unsigned int>(a, b); }
inline int SgnCompare(const long& a, const long& b)                     { return NumberCompare__<long>(a, b); }
inline int SgnCompare(const unsigned long& a, const unsigned long& b)   { return NumberCompare__<unsigned long>(a, b); }
inline int SgnCompare(const bool& a, const bool& b)                     { return NumberCompare__<bool>(a, b); }
inline int SgnCompare(const int64& a, const int64& b)                   { return NumberCompare__<int64>(a, b); }
inline int SgnCompare(const uint64& a, const uint64& b)                 { return NumberCompare__<uint64>(a, b); }
inline int SgnCompare(const float& a, const float& b)                   { return NumberCompare__<float>(a, b); }
inline int SgnCompare(const double& a, const double& b)                 { return NumberCompare__<double>(a, b); }



template <class T> inline bool IsNull(const T& o) {return o.IsNull();}
inline bool IsNull(const bool& v)	{return v == false;}
inline bool IsNull(const int8& v)	{return v == 0;}
inline bool IsNull(const int16& v)	{return v == 0;}
inline bool IsNull(const int32& v)	{return v == 0;}
inline bool IsNull(const int64& v)	{return v == 0;}
inline bool IsNull(const uint8& v)	{return v == 0;}
inline bool IsNull(const uint16& v)	{return v == 0;}
inline bool IsNull(const uint32& v)	{return v == 0;}
inline bool IsNull(const uint64& v)	{return v == 0;}
inline bool IsNull(const float& v)	{return v == 0.0f;}
inline bool IsNull(const double& v)	{return v == 0.0;}

}


#define uint8		Lang::uint8
#define int8		Lang::int8
#define uint16		Lang::uint16
#define int16		Lang::int16
#define uint32		Lang::uint32
#define int32		Lang::int32
#define uint64		Lang::uint64
#define int64		Lang::int64
#define byte		Lang::byte
#define word		Lang::word
#define dword		Lang::dword
#define qword		Lang::qword
#define CString		Lang::CString
#define VoidPtr		Lang::VoidPtr
#define FitsInInt64		Lang::FitsInInt64
#define ConstVoidPtr	Lang::ConstVoidPtr
#define Destruct		Lang::Destruct
#define MemoryAlloc		Lang::Memory::Alloc
#define MemoryFree		Lang::Memory::Free
#define MemoryCompare	Lang::Memory::Compare
#define MemoryCopy		Lang::Memory::Copy
#define MemoryMove		Lang::Memory::Move
#define MemorySet		Lang::Memory::Set
#define StringCompare	Lang::Memory::StringCompare
#define SysBreak		Lang::SysBreak
#define StringLength	Lang::StringLength
#define AtomicFlag		Lang::AtomicFlag
#define SpinLock		AtomicFlag
#define AtomicBool		Lang::AtomicBool
#define AtomicInt		Lang::AtomicInt
#define ConditionalVar	Lang::ConditionalVar
#define MemoryLimitExc	Lang::MemoryLimitExc
#define FwdIterator			Lang::FwdIterator
#define BwdIterator			Lang::BwdIterator
#define ConstFwdIterator	Lang::ConstFwdIterator
#define ConstBwdIterator	Lang::ConstBwdIterator
#define FwdPtrIterator		Lang::FwdPtrIterator
#define BwdPtrIterator		Lang::BwdPtrIterator
#define ConstFwdPtrIterator	Lang::ConstFwdPtrIterator
#define ConstBwdPtrIterator	Lang::ConstBwdPtrIterator
#define FwdPairIterator			Lang::FwdPairIterator
#define BwdPairIterator			Lang::BwdPairIterator
#define ConstFwdPairIterator	Lang::ConstFwdPairIterator
#define ConstBwdPairIterator	Lang::ConstBwdPairIterator
#define FwdPairPtrIterator		Lang::FwdPairPtrIterator
#define BwdPairPtrIterator		Lang::BwdPairPtrIterator
#define ConstFwdPairPtrIterator	Lang::ConstFwdPairPtrIterator
#define ConstBwdPairPtrIterator	Lang::ConstBwdPairPtrIterator
#define DynArray				Lang::DynArray
#define SgnCompare				Lang::SgnCompare
#define IsNull					Lang::IsNull

#undef ASSERT
#undef ASSERT_
#undef PANIC
#define ASSERT(e) {if (!(e)) {SysBreak("Assertion failed: " #e);}}
#define ASSERT_(e, msg) {if (!(e)) {SysBreak("Assertion failed: " msg);}}
#define PANIC(msg) SysBreak(msg);


