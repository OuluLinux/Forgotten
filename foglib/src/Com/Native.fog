
/*namespace std {
export/interface Com;
export/implementation Com;

template <class T> struct initializer_list {
	int size() :{ export/noimplementation; };
	T* begin() :{ export/noimplementation; };
	T* end() :{ export/noimplementation; };
};

}*/

namespace Native {

struct FILE;

FILE* GetStdOut();
FILE* GetStdIn();
FILE* GetStdErr();

int SignificantBits(uint32 x) :{ export/noimplementation; };
int SignificantBits64(uint64 x) :{ export/noimplementation; };

int64 DateSeconds(uint64 year, uint64 month, uint64 day) :{ export/noimplementation; };
int64 TimeSeconds(uint64 year, uint64 month, uint64 day, uint64 hour, uint64 minute, uint64 second) :{ export/noimplementation; };
uint64 CurrentTime() :{ export/noimplementation; };
uint64 NanoSeconds() :{ export/noimplementation; };
uint64 MilliSeconds() :{ export/noimplementation; };

void DblStr(double d, char* buf, int buf_size);
void DblStr(double d, short* buf, int buf_size);

const short* Utf8To16(const char* in);
const char*  Utf16To8(const short* in);

void FileClose(FILE* s);
void FileOpen(FILE** s, const char* path, bool rw, bool append);
int  FileTell(FILE* s);
int  FileWrite(const void* buf, int size, int nmemb, FILE* s);
int  FileRead(void* buf, int size, int nmemb, FILE* s);
void FileSeekSet(FILE* s, int offset);
void FileSeekEnd(FILE* s, int offset=0);
bool IsFileEnd(FILE* s);
void FileFlush(FILE* s);

const char* GetHomeDir();
const char* GetEnv(const char* id);

bool DirExists(const char* path);
bool PathExists(const char* path);
void CreateDirectory(const char* path);
void DeleteFile(const char* path);
void RenameFile(const char* oldpath, const char* newpath);
void GetDirFiles(const char* dir, void(*add_path)(const char*,void*), void* arg);

int PopCount64(uint64 i);
int PopCount32(dword i);
int HammingDistance32(int count, const dword* a, const dword* b);
int HammingDistance64(int count, const uint64* a, const uint64* b);

bool IsFinite(float f);
bool IsFinite(double f);
int64 GetCpuTicks();
int64 Delay(int64 cpu_ticks);

struct Trans8x16 {
	union {
		uint16 u16[8];
		uint8 u8[16];
		uint64 u64[2];
	};
	
	void TransFrom16x8();
	void Zero();
};

}


#define SignificantBits				Native::SignificantBits
#define SignificantBits64			Native::SignificantBits64
#define DateSeconds					Native::DateSeconds
#define TimeSeconds					Native::TimeSeconds
#define NativeCurrentTime			Native::CurrentTime
#define NativeNanoSeconds			Native::NanoSeconds
#define NativeMilliSeconds			Native::MilliSeconds
#define NativeDblStr				Native::DblStr
#define NativeUtf8To16				Native::Utf8To16
#define NativeUtf16To8				Native::Utf16To8
