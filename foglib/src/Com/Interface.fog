namespace Interface {
using/interface Chrono;

class Value;
class ValueMap;
class ValueArray;


int RegisterTypeNo(const char *type) {
	static Index<String> idx;
	return idx.FindAdd(type);
}



template <class K>
inline int StaticTypeNo(K* p) {
	static int typeno = RegisterTypeNo(typeid(K).name());
	return typeno;
}

enum {
	VOID_V					= 0,
	INT_V					= 1,
	DOUBLE_V				= 2,
	STRING_V				= 3,
	DATE_V					= 4,
	TIME_V					= 5,
	ERROR_V					= 6,
	VALUE_V					= 7,
	WSTRING_V				= 8,
	VALUEARRAY_V			= 9,
	INT64_V					= 10,
	BOOL_V					= 11,
	VALUEMAP_V				= 12,
	VALUE_ARRAY_AND_MAP_V	= 13,
	UNKNOWN_V				= 0Xffffffff,
};



template <class T>
inline dword ValueTypeNo(const T*)       { return StaticTypeNo((T*)0) + 0x8000000; }

inline dword ValueTypeNo(const void*)    { return VOID_V; }
inline dword ValueTypeNo(const int*)     { return INT_V; }
inline dword ValueTypeNo(const int64*)   { return INT64_V; }
inline dword ValueTypeNo(const double*)  { return DOUBLE_V; }
inline dword ValueTypeNo(const bool*)    { return BOOL_V; }
inline dword ValueTypeNo(const String*)  { return STRING_V; }
inline dword ValueTypeNo(const WString*) { return WSTRING_V; }
inline dword ValueTypeNo(const Date*)    { return DATE_V; }
inline dword ValueTypeNo(const Time*)    { return TIME_V; }
inline dword ValueTypeNo(const Value*)   { return VALUE_V; }

class ValueObject {
protected:
	dword type = VOID_V;
	
public:
	virtual ~ValueObject() {}
	virtual void* Get() {return 0;}
	virtual String AsString() const {return "VOID";}
	virtual int64 AsInt() const {return 0;}
	dword GetType() const {return type;}
};

template <class T>
class ValueTemplate : public ValueObject {
	bool is_owned = false;
	T* ptr = NULL;
	
public:
	inline ValueTemplate() {ptr = new T(); is_owned = true; type = ValueTypeNo<T>(0);}
	inline ValueTemplate(T* ptr) : ptr(ptr) {type = ValueTypeNo<T>(0);}
	inline ValueTemplate(const T& obj) {ptr = new T(obj); is_owned = true; type = ValueTypeNo<T>(0);}
	inline ~ValueTemplate() {if (is_owned && ptr) {delete ptr; ptr = 0; is_owned = false; type = VOID_V;}}
	virtual inline void* Get() {return ptr;}
	virtual inline String AsString() const {if (ptr) return ToString(*ptr); return "NULL";}
	virtual inline int64 AsInt() const {if (ptr) return ToInt(*ptr); return 0;}
};


class Value {
	$MakeMoveable();
	
	SharedPtr<ValueObject> obj;
	
public:
	
	Value() {}
	Value(const Value& v) {*this = v;}
	Value(const char* str) {String& s = Create<String>(); s = str;}
	//template <class T> Value(const T& o) {obj.WrapObject(new ValueTemplate<T>(o));}
	
	void Clear() {obj.Clear();}
	template <class T> inline T& Create() {ValueTemplate<T>* o = new ValueTemplate<T>(); T* t = (T*)o->Get(); obj.WrapObject(o); return *t;}
	template <class T> inline T& Create1(const T& arg) {ValueTemplate<T>* o = new ValueTemplate<T>(arg); T* t = (T*)o->Get(); obj.WrapObject(o); return *t;}
	void DeepCopyArrayMap(Value v);
	ValueMap&   CreateMap();
	ValueArray& CreateArray();
	
	bool operator==(const Value& v) const {return obj == v.obj;}
	
	dword GetType() const {if (obj) return obj->GetType(); return VOID_V;}
	template <class T> inline Value&	operator=(const Value& v) {obj = v.obj; return *this;}
	//template <class T> Value&	operator=(T* o) {Set<T>(o); return *this;}
	//template <class T> Value&	operator=(const T& o) {Set<T>(o); return *this;}
	
	template <class T> inline void	Attach(T* o) {obj = new ValueTemplate<T>(o);}
	template <class T> inline void	Set(const T& o) {obj.WrapObject(new ValueTemplate<T>(o));}
	template <class T> inline bool	Is() const {if (obj) return obj->GetType() == ValueTypeNo<T>(0); return false;}
	template <class T> inline T* Try() const {
		if (obj && obj->GetType() == ValueTypeNo<T>(0))
			return (T*)obj->Get();
		return NULL;
	}

		
	template <class T> inline operator T&() const {
		if (obj && obj->GetType() == ValueTypeNo<T>(0))
			return *(T*)obj->Get();
		throw Exc("Unexpected value type");
	}
	template <class T> inline T& Get() const {
		if (obj && obj->GetType() == ValueTypeNo<T>(0))
			return *(T*)obj->Get();
		throw Exc("Unexpected value type");
	}
	template <class T> inline T& ForcedGet() const {return *(T*)obj->Get();}
	const ValueMap* TryGetMap() const;
	const ValueArray* TryGetArray() const;
	ValueMap* TryGetMap();
	ValueArray* TryGetArray();
	const ValueMap& GetMap() const;
	const ValueArray& GetArray() const;
	ValueMap& GetMap();
	ValueArray& GetArray();
	Value* GetMapSub(String key, Value* def=NULL);
	Value* AddMapSub(String key, Value* def=NULL);
	Value* GetAddMapSub(String key, Value* def=NULL);
	ValueObject* GetObject() const {return obj.Get();}
	
	bool IsVoid() const {if (obj) return obj->GetType() == VOID_V; return true;}
	bool IsArray() const;
	bool IsMap() const;
	bool IsArrayMapComb() const;
	bool IsString() const {return !obj.IsEmpty() && obj->GetType() == STRING_V;}
	bool IsInt() const {return !obj.IsEmpty() && obj->GetType() == INT_V;}
	bool IsInt64() const {return !obj.IsEmpty() && obj->GetType() == INT64_V;}
	
	String AsString() const {if (obj) return obj->AsString(); return "NULL";}
	int64 AsInt() const {if (obj) return obj->AsInt(); return 0;}
};

template<class T> inline Value AsValue(const T& o) {Value v; v.Create1<T>(o); return v;}

class ValueArray {
	typedef Array<Value> A;
	A values;
	
public:
	
	ValueArray() {}
	ValueArray(const ValueArray& m) {*this = m;}
	void operator=(const ValueArray& m) {values <<= m.values;}
	
	void Clear() {values.Clear();}
	Value& Add() {return values.Add();}
	Value& Add(const Value& v) {return values.Add(v);}
	template<class T> inline Value& AddAsValue(const T& o) {return values.Add(AsValue(o));}
	Value& Insert(int i) {return values.Insert(i);}
	Value& Insert(int i, const Value& v) {return values.Insert(i, v);}
	int GetCount() const {return values.GetCount();}
	Value& operator[](int i) {return values[i];}
	Value& At(int i) {return values[i];}
	const Value& operator[](int i) const {return values[i];}
	const Value& At(int i) const {return values[i];}
	bool IsEmpty() const {return values.IsEmpty();}
	void SetCount(int i) {values.SetCount(i);}
	void DeepCopyArrayMap(ValueArray& arr);
	
	String AsString() const {String s; s << "ValueArray(" << values.GetCount() << ")"; return s;}
	int64 AsInt() const {return values.GetCount();}
	
	FwdPtrIterator<Value> begin() {return values.begin();}
	FwdPtrIterator<Value> end() {return values.end();}
	ConstFwdPtrIterator<Value> begin() const {return values.begin();}
	ConstFwdPtrIterator<Value> end() const {return values.end();}
};




class ValueMap {
	Vector<String> keys;
	Array<Value> values;
	
public:
	
	ValueMap() {}
	ValueMap(const ValueMap& m) {*this = m;}
	void operator=(const ValueMap& m) {keys <<= m.keys; values <<= m.values;}
	
	Value& Add(String key, Value v) {keys.Add(key); return values.Add(v);}
	Value& Add(String key) {keys.Add(key); return values.Add();}
	template<class T> inline Value& AddAsValue(String key, const T& o) {keys.Add(key); return values.Add(AsValue(o));}
	Value& GetAdd(String key) {int i = Find(key); if (i >= 0) return values[i]; return Add(key);}
	Value& GetAdd(String key, const Value& def) {int i = Find(key); if (i >= 0) return values[i]; return Add(key, def);}
	Value TryGet(String key, Value def=Value()) {int i = Find(key); if (i >= 0) return At(i); else return def;}
	Value* TryFind(String key) {int i = Find(key); if (i >= 0) return &At(i); return NULL;}
	int Find(String key) const {for(int i = 0; i < keys.GetCount(); i++) if (keys[i] == key) return i; return -1;}
	Value& Get(String key) {int i = Find(key); if (i == -1) throw Exc("Unexpected key"); return values[i];}
	int GetPos(Value* v) const {for(int i = 0; i < values.GetCount(); i++) if (&values[i] == v) return i; return -1;}
	
	void Clear() {keys.Clear(); values.Clear();}
	int GetCount() const {return values.GetCount();}
	Value& operator[](int i) {return values[i];}
	Value& At(int i) {return values[i];}
	const Value& operator[](int i) const {return values[i];}
	const Value& At(int i) const {return values[i];}
	String GetKey(int i) const {return keys[i];}
	void DeepCopyArrayMap(ValueMap& map);
	
	String AsString() const {String s; s << "ValueMap(" << keys.GetCount() << ")"; return s;}
	int64 AsInt() const {return keys.GetCount();}
};


struct ValueArrayMapComb {
	ValueArray arr;
	ValueMap   map;
	
	
	ValueArrayMapComb() {}
	ValueArrayMapComb(const ValueArrayMapComb& v) {*this = v;}
	void operator=(const ValueArrayMapComb& v) {arr = v.arr; map = v.map;}
	void DeepCopyArrayMap(ValueArrayMapComb& am);
	
	void Clear() {arr.Clear(); map.Clear();}
	int GetTotal() const {return arr.GetCount() + map.GetCount();}
	String AsString() const {String s; s << "ValueArrayMapComb(" << arr.GetCount() << ", " << map.GetCount() << ")"; return s;}
	int64 AsInt() const {return GetTotal();}
};


template<> inline dword ValueTypeNo(const ValueArray*)          { return VALUEARRAY_V; }
template<> inline dword ValueTypeNo(const ValueMap*)            { return VALUEMAP_V; }
template<> inline dword ValueTypeNo(const ValueArrayMapComb*)   { return VALUE_ARRAY_AND_MAP_V; }



String GetValueTreeString(const Value& v, String key, int indent) {
	thread_local static Index<void*> visited;
	if (!indent)
		visited.Clear();
	
	String s;
	for(int i = 0; i < indent; i++)
		s.Cat('\t');
	s << key;
	
	void* obj = v.GetObject();
	if (obj) {
		if (visited.Find(obj) >= 0)
			return s + ": <recursive>\n";
		visited.Add(obj);
	}
	
	if (v.IsMap()) {
		s.Cat('\n');
		const ValueMap& map = v.Get<ValueMap>();
		for(int i = 0; i < map.GetCount(); i++) {
			String key = map.GetKey(i);
			const Value& v0 = map[i];
			s << GetValueTreeString(v0, key, indent+1);
		}
	}
	else if (v.IsArray()) {
		s.Cat('\n');
		const ValueArray& arr = v.Get<ValueArray>();
		for(int i = 0; i < arr.GetCount(); i++) {
			String key = IntStr(i);
			const Value& v0 = arr[i];
			s << GetValueTreeString(v0, key, indent+1);
		}
	}
	else if (v.IsArrayMapComb()) {
		s.Cat('\n');
		const ValueArrayMapComb& comb = v.Get<ValueArrayMapComb>();
		for(int i = 0; i < comb.map.GetCount(); i++) {
			String key = comb.map.GetKey(i);
			const Value& v0 = comb.map[i];
			s << GetValueTreeString(v0, key, indent+1);
		}
		for(int i = 0; i < comb.arr.GetCount(); i++) {
			String key = IntStr(i);
			const Value& v0 = comb.arr[i];
			s << GetValueTreeString(v0, key, indent+1);
		}
	}
	else {
		s << ": " << v.AsString() << "\n";
	}
	
	if (obj)
		visited.RemoveLast();
	
	return s;
}

enum {
	FMT_MAIN_SWITCH = 0,

	FMT_TYPE_INVALID = 0,
	FMT_TYPE_STRING,
	FMT_TYPE_INT,
};

struct Formater {
	String pattern;
	Vector<Value> values;
	
	Formater(String pattern) : pattern(pattern) {}
	Formater& operator()(Value v) {values.Add(v); return *this;}
	Formater& operator()(int i) {values.Add().Create1<int>(i); return *this;}
	Formater& operator()(String s) {values.Add().Create1<String>(s); return *this;}
	operator String() {
		if (pattern.IsEmpty()) return "";
		
		int arg = 0;
		String out;
		const char* it  = pattern.Begin();
		const char* end = pattern.End();
		while (it != end) {
			int chr = *it++;
			
			// \ or %
			if (chr == 92 && *it == 37) {
				chr = *it++;
				out.Cat(chr);
			}
			// %
			else if (chr == 37) {
				int state = FMT_MAIN_SWITCH;
				int type = FMT_TYPE_INVALID;
				while (it != end) {
					chr = *it++;
					if (state == FMT_MAIN_SWITCH) {
						if (chr == 's') {
							type = FMT_TYPE_STRING;
							break;
						}
						else if (chr == 'd') {
							type = FMT_TYPE_INT;
							break;
						}
						else break;
					}
					else break;
				}
				if (type == FMT_TYPE_INVALID)
					out << "<invalid>";
				else if (type == FMT_TYPE_STRING) {
					if (arg < values.GetCount())
						out << values[arg++].AsString();
					else
						out << "<arg overflow " << arg++ << ">";
				}
				else if (type == FMT_TYPE_INT) {
					if (arg < values.GetCount())
						out << IntStr(values[arg++].AsInt());
					else
						out << "<arg overflow " << arg++ << ">";
				}
			}
			else {
				out.Cat(chr);
			}
		}
		return out;
	}
};

















ValueMap& Value::CreateMap() {
	Create<ValueMap>();
	return GetMap();
}

ValueArray& Value::CreateArray() {
	Create<ValueArray>();
	return GetArray();
}

bool Value::IsArray() const {
	return Is<ValueArray>();
}

bool Value::IsMap() const {
	return Is<ValueMap>();
}

bool Value::IsArrayMapComb() const {
	return Is<ValueArrayMapComb>();
}

const ValueArray* Value::TryGetArray() const {
	if (IsArray())
		return &Get<ValueArray>();
	else if (IsArrayMapComb())
		return &Get<ValueArrayMapComb>().arr;
	else
		return NULL;
}

const ValueMap* Value::TryGetMap() const {
	if (IsMap())
		return &Get<ValueMap>();
	else if (IsArrayMapComb())
		return &Get<ValueArrayMapComb>().map;
	else
		return NULL;
}

ValueArray* Value::TryGetArray() {
	if (IsArray())
		return &Get<ValueArray>();
	else if (IsArrayMapComb())
		return &Get<ValueArrayMapComb>().arr;
	else
		return NULL;
}

ValueMap* Value::TryGetMap() {
	if (IsMap())
		return &Get<ValueMap>();
	else if (IsArrayMapComb())
		return &Get<ValueArrayMapComb>().map;
	else
		return NULL;
}

const ValueMap& Value::GetMap() const {
	if (!Is<ValueMap>())
		throw Exc("Not a ValueMap");
	return Get<ValueMap>();
}

const ValueArray& Value::GetArray() const {
	if (!Is<ValueArray>())
		throw Exc("Not a ValueArray");
	return Get<ValueArray>();
}

ValueMap& Value::GetMap() {
	if (!Is<ValueMap>())
		throw Exc("Not a ValueMap");
	return Get<ValueMap>();
}

ValueArray& Value::GetArray() {
	if (!Is<ValueArray>())
		throw Exc("Not a ValueArray");
	return Get<ValueArray>();
}

Value* Value::GetMapSub(String key, Value* def) {
	if (IsMap() || IsArrayMapComb()) {
		ValueMap* map;
		if (IsMap())	map = &Get<ValueMap>();
		else			map = &Get<ValueArrayMapComb>().map;
		int i = map->Find(key);
		if (i >= 0)
			return &map->At(i);
		else
			return NULL;
	}
	else return NULL;
}

Value* Value::AddMapSub(String key, Value* def) {
	if (IsMap() || IsArrayMapComb()) {
		ValueMap* map;
		if (IsMap())	map = &Get<ValueMap>();
		else			map = &Get<ValueArrayMapComb>().map;
		int i = map->Find(key);
		if (i >= 0)
			return NULL;
		else if (def)
			return &map->Add(key, *def);
		else
			return &map->Add(key);
	}
	else return NULL;
}

Value* Value::GetAddMapSub(String key, Value* def) {
	if (IsMap() || IsArrayMapComb()) {
		ValueMap* map;
		if (IsMap())	map = &Get<ValueMap>();
		else			map = &Get<ValueArrayMapComb>().map;
		int i = map->Find(key);
		if (i >= 0)
			return &map->At(i);
		else if (def)
			return &map->Add(key, *def);
		else
			return &map->Add(key);
	}
	else return NULL;
}

void Value::DeepCopyArrayMap(Value v) {
	if (v.IsArray())
		CreateArray().DeepCopyArrayMap(v.GetArray());
	else if (v.IsMap())
		CreateMap().DeepCopyArrayMap(v.GetMap());
	else *this = v;
}










void ValueArray::DeepCopyArrayMap(ValueArray& arr) {
	Clear();
	SetCount(arr.GetCount());
	for(int i = 0; i < GetCount(); i++) {
		Value& from = arr.At(i);
		Value& dst = At(i);
		dst.DeepCopyArrayMap(from);
	}
}




void ValueMap::DeepCopyArrayMap(ValueMap& map) {
	Clear();
	for(int i = 0; i < map.GetCount(); i++) {
		String key = map.GetKey(i);
		Value& from = map.At(i);
		Value& dst = Add(key);
		dst.DeepCopyArrayMap(from);
	}
}




void ValueArrayMapComb::DeepCopyArrayMap(ValueArrayMapComb& am) {
	Clear();
	arr.SetCount(am.arr.GetCount());
	for(int i = 0; i < arr.GetCount(); i++) {
		Value& from = am.arr.At(i);
		Value& dst = arr.At(i);
		dst.DeepCopyArrayMap(from);
	}
	for(int i = 0; i < am.map.GetCount(); i++) {
		String key = am.map.GetKey(i);
		Value& from = am.map.At(i);
		Value& dst = map.Add(key);
		dst.DeepCopyArrayMap(from);
	}
}











class Convert {
public:
	Convert();
	virtual ~Convert();

	virtual Value  Format(const Value& q) const;
	virtual Value  Scan(const Value& text) const;
	virtual int    Filter(int chr) const;

	Value operator()(const Value& q) const              { return Format(q); }
};

const Convert& StdConvert() {
	static Convert h;
	return h;
}

String StdFormat(const Value& q) {
	return StdConvert().Format(q);
}













Convert::Convert() {}
Convert::~Convert() {}

Value Convert::Format(const Value& q) const {
	if(q.IsVoid())
		return AsValue(String());
	switch(q.GetType()) {
	case INT64_V:
		return AsValue(IntStr64((int64)q));
	case INT_V:
	case BOOL_V:
		return AsValue(IntStr((int)q));
	case DOUBLE_V:
		return AsValue(DblStr((double)q));
	case DATE_V:
		return AsValue(q.ForcedGet<Date>().AsString());
	case TIME_V:
		return AsValue(q.ForcedGet<Time>().AsString());
	case STRING_V:
	case WSTRING_V:
		return q;
	}
	return AsValue(q.AsString());
}

Value Convert::Scan(const Value& text) const {
	return text;
};

int Convert::Filter(int chr) const {
	return chr;
}



}

#define Value				Interface::Value
#define ValueMap			Interface::ValueMap
#define ValueArray			Interface::ValueArray
#define ValueArrayMapComb	Interface::ValueArrayMapComb
#define GetValueTreeString	Interface::GetValueTreeString
#define Formater			Interface::Formater
#define AsValue				Interface::AsValue
#define StdFormat			Interface::StdFormat

