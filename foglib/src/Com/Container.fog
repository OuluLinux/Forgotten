namespace Container {



auto declaration MakeFiller(int size) {
	struct Filler {
		$MakeMoveable();
		
		byte filler[size];
	};
}


template <class T>
class Pick {
	T* var = NULL;
public:
	inline Pick(T& var) : var(&var) {}
	inline Pick(const Pick& p) : var(p.var) {}
	//Pick(Pick&& p) : var(p.var) {p.var = NULL;}
	inline T& Get() const {return *var;}
	
	static Pick<T> Make(T* p) {return Pick<T>(p);}
};



template <class T>
inline void Swap(T& a, T& b) {
	uint8 tmp[sizeof(T)];
	MemoryCopy(tmp, &a, sizeof(T));
	MemoryCopy(&a, &b, sizeof(T));
	MemoryCopy(&b, tmp, sizeof(T));
}

template <class T>
inline void Reverse(T& t) {
	int count = t.GetCount();
	int count_2 = count / 2;
	int a = 0;
	int b = count - 1;
	for (int i = 0; i < count_2; i++) {
		Swap(t[a++], t[b--]);
	}
}


template <class T> inline class One {
	T* obj = 0;

public:
	typedef const T ConstT;
	
	inline One() {}
	inline One(One& o) {obj = o.obj; o.obj = NULL;}
	inline One(T* obj) : obj(obj) {}
	inline ~One() { Clear(); }

	inline void Create() { Clear(); obj = new T(); }
	inline void Clear() { if (obj) { delete obj; obj = NULL; } }
	inline void operator=(T* obj) { Clear(); this->obj = obj; }
	inline bool Is() const { return obj != NULL; }
	inline bool IsEmpty() const { return obj == NULL; }
	inline T* operator->() {ASSERT(obj); return obj;}
	inline const T* operator->() const {ASSERT(obj); return obj;}
	inline T& operator*() {ASSERT(obj); return *obj;}
	inline const T& operator*() const {ASSERT(obj); return *obj;}
	inline T* Get() {return obj;}
	inline const T* Get() const {return obj;}
	inline T& Value() {return *obj;}
	inline T* Detach() {ASSERT(obj); T* tmp = obj; obj = NULL; return tmp;}
	inline operator bool() const {return !IsEmpty();}
	inline bool operator!=(void* ptr) {return ptr != obj;}
	inline operator T&() {ASSERT(obj); return *obj;}
	inline operator ConstT&() const {ASSERT(obj); return *obj;}
	
	template <class K> inline void CreateDerived() {Clear(); obj = new K();}
	template <class K> inline K* GetDerived() {return dynamic_cast<K*>(obj);}
};

template <class T> inline class FutureOne {
	ConditionalVar cond;
	One<T> one;
	
public:
	inline FutureOne() {}
	
	inline void Set(T* o) {
		Clear();
		one = o;
		cond.SetReady(o != 0);
	}
	inline void Clear() {one.Clear(); cond.SetReady(false);}
	inline T* Get() {if (one.IsEmpty()) return 0; return &*one;}
	inline T* Detach() {T* o = one.Detach(); cond.SetReady(false); return o;}
	inline bool IsEmpty() const {return one.IsEmpty();}
	inline void Wait() {
		if (cond.IsReady()) {
			if (!one.IsEmpty()) return;
			cond.SetReady(false);
		}
		else {
			if (!one.IsEmpty()) {cond.SetReady(); return;}
		}
		cond.Wait();
	}
	
	
	inline T* operator=(T* o) {Set(o); return o;}
	
};


template <class T>
class Optional {
	T* obj = NULL;

public:
	typedef Container::Pick<T>			PickT;
	typedef Container::Pick<Optional>	PickOpt;
	
	Optional() {}
	//Optional(Optional&& o) {obj = o.obj; o.obj = NULL;}
	Optional(const Optional& opt) {if (opt.obj) this->obj = new T(*opt.obj);}
	Optional(const T& obj) {this->obj = new T(obj);}
	Optional(T* obj) : obj(obj) {}
	Optional(const PickT& n) {*this = n;}
	~Optional() { Clear(); }

	void Create() { Clear(); obj = new T(); }
	template <class K> void Create1(const K& arg) {Clear(); this->obj = new T(arg);}
	void Clear() { if (obj) { delete obj; obj = NULL; } }
	void operator=(const T& obj) { Clear(); this->obj = new T(obj); }
	void operator=(const Optional& o) { Clear(); if (!o.IsEmpty()) {this->obj = new T(*o.obj); }}
	void operator=(const PickOpt& n) { Clear(); if (!n.Get().IsEmpty()) {Pick(n.Get());}}
	void Pick(Optional& o) {obj = o.obj; o.obj = NULL;}
	bool IsEmpty() const { return obj == NULL; }
	T& GetValue() const {return *obj;}
	T* operator->() {ASSERT(obj); return obj;}
	operator bool () const {return obj != NULL;}
	T& operator*() {return *obj;}
};





template <class K>
class Vector : public DynArray<K> {
	typedef DynArray<K> Base;
	
	$MakeMoveable();
	
public:
	typedef ConstFwdIterator<K> ConstIterator;
	typedef ConstBwdIterator<K> ConstRIterator;
	typedef FwdIterator<K> Iterator;
	typedef BwdIterator<K> RIterator;
	
	inline Vector() {}
	inline Vector(const Vector& v) : Base(v) {}
	
	inline void Serialize(StreamBase& s) {
		static const byte correct_pre = 0xA;
		static const byte correct_post = 0xB;
		byte pre_magic;
		byte post_magic;
		uint32 len = 0;
		if (s.IsLoading()) {
			s.Get(&pre_magic, 1);
			if (pre_magic != correct_pre) {
				s.SetCorrupted();
				return;
			}
			
			s.Get(&len, sizeof(len));
			if (len > 2000000000) {
				s.SetCorrupted();
				return;
			}
			Base::SetCount(len);
			Iterator it = Base::Begin();
			Iterator end = Base::End();
			for(; it != end; ++it)
				Abstract::Serialize(*it, s);
			
			s.Get(&post_magic, 1);
			if (post_magic != correct_post) {
				s.SetCorrupted();
				return;
			}
		}
		else if (s.IsStoring()) {
			s.Put(&correct_pre, 1);
			
			len = Base::GetCount();
			s.Put(&len, sizeof(len));
			Iterator it = Base::Begin();
			Iterator end = Base::End();
			for(; it != end; ++it)
				Abstract::Serialize(*it, s);
			
			s.Put(&correct_post, 1);
		}
	}
	
	
	inline String Join(String join_str = "", bool ignore_empty = true) const {
		String out;
		ConstIterator end = Base::End();
		for (ConstIterator it = Base::Begin(); it != end; ++it) {
			String s = ToString<K>(*it);
			if (s.IsEmpty() && ignore_empty)
				continue;
			if (!out.IsEmpty())
				out << join_str;
			out << s;
		}
		return out;
	}
	
	inline void Split(String to_split, String split_str, bool ignore_empty = true) {
		Base::SetCount(0);
		if (to_split.IsEmpty() || split_str.IsEmpty())
			return;
		
		int i = to_split.Find(split_str);
		if (i == -1)
			FromString(to_split, Base::Add());
		else {
			int j = 0;
			while (i >= 0) {
				String str = to_split.Mid(j, i - j);
				if (str.GetCount() == 0) {
					if (!ignore_empty)
						FromString(str, Base::Add());
				}
				else
					FromString(str, Base::Add());
				i += split_str.GetCount();
				j = i;
				i = to_split.Find(split_str, i);
			}
			i = to_split.GetCount();
			String str = to_split.Mid(j, i - j);
			if (str.GetCount() == 0) {
				if (!ignore_empty)
					FromString(str, Base::Add());
			}
			else {
				FromString(str, Base::Add());
			}
		}
	}
};













template <class K>
class VectorPtr {
	DynArray<K*> data;
	
	$MakeMoveable();
	
public:
	typedef ConstFwdPtrIterator<K> ConstIterator;
	typedef ConstBwdPtrIterator<K> ConstRIterator;
	typedef FwdPtrIterator<K> Iterator;
	typedef BwdPtrIterator<K> RIterator;
	
	inline VectorPtr() {}
	inline VectorPtr(const VectorPtr& v) : data(v) {}
	
	//void Serialize(StreamBase& s);
	inline K& Add(K* o) {data.Add(o); return *o;}
	inline int GetCount() const {return data.GetCount();}
	inline void Append(const VectorPtr& v) {data.Append(v.data);}
	inline void Append(const VectorPtr& v, int i, int n) {data.Append(v.data, i, n);}
	inline K& operator[](int i) {return *data[i];}
	inline const K& operator[](int i) const {return *data[i];}
	inline K*& Ref(int i) {return data[i];}
	inline void Clear() {data.Clear();}
	inline K* Pop() {return data.Pop();}
	inline void SetCount(int i) {data.SetCount(i, 0);}
	inline FwdPtrIterator<K> Begin() {return FwdPtrIterator<K>(data.Get());}
	inline FwdPtrIterator<K> End() {return FwdPtrIterator<K>(data.GetEnd());}
	
	inline String Join(String join_str = "", bool ignore_empty = true) const {
		String out;
		ConstIterator end = data.End();
		for (ConstIterator it = data.Begin(); it != end; ++it) {
			String s = ToString<K>(**it);
			if (s.IsEmpty() && ignore_empty)
				continue;
			if (!out.IsEmpty())
				out << join_str;
			out << s;
		}
		return out;
	}
	
	
};













template <class K>
class Array {
	
	DynArray<K*> l;
	

public:
	typedef K IndirectK;
	typedef const K ConstK;
	typedef FwdPtrIterator<K> Iterator;
	typedef BwdPtrIterator<K> RIterator;
	typedef ConstFwdPtrIterator<K> CIterator;
	typedef ConstBwdPtrIterator<K> CRIterator;


	inline Array() {}
	inline ~Array() { Clear(); }
	
	//Vector<K*>& GetPtrVector() {return l;}
	
	K** Get() const {return l.Get();}
	K** GetEnd() const {return l.GetEnd();}
	const K** GetConst() const {return l.Get();}
	const K** GetConstEnd() const {return l.GetEnd();}
	
	inline FwdPtrIterator<K>		Begin()			{return Iterator(l.Get());}
	inline FwdPtrIterator<K>		End()			{return Iterator(l.GetEnd());}
	inline ConstFwdPtrIterator<K>	Begin() const	{return CIterator((const K**)l.Get());}
	inline ConstFwdPtrIterator<K>	End() const		{return CIterator((const K**)l.GetEnd());}
	inline FwdPtrIterator<K>		begin()			{return Begin();}
	inline FwdPtrIterator<K>		end()			{return End();}
	inline ConstFwdPtrIterator<K>	begin() const	{return Begin();}
	inline ConstFwdPtrIterator<K>	end() const		{return End();}
	inline BwdPtrIterator<K>		RBegin()		{return RIterator(l.GetEnd() - 1);}
	inline BwdPtrIterator<K>		REnd()			{return RIterator(l.Get() - 1);}
	inline ConstBwdPtrIterator<K>	RBegin() const	{return CRIterator(l.GetConstEnd() - 1);}
	inline ConstBwdPtrIterator<K>	REnd() const	{return CRIterator(l.GetConst() - 1);}
	inline BwdPtrIterator<K>		rbegin()		{return RBegin();}
	inline BwdPtrIterator<K>		rend()			{return REnd();}
	inline ConstBwdPtrIterator<K>	rbegin() const	{return RBegin();}
	inline ConstBwdPtrIterator<K>	rend() const	{return REnd();}
	
	inline void Reserve(int i) {l.Reserve(i);}
	inline void SetCount(int new_count) {
		int count = l.GetCount();
		if (new_count == count) return;
		if (new_count > count) {
			l.SetCount(new_count);
			for (int i = count; i < new_count; i++)
				l[i] = new K();
		}
		else {
			for (int i = count - 1; i >= new_count; i--)
				delete l[i];
			l.SetCount(new_count);
		}
	}
	inline K& Add() { K* k = new K(); l.Add(k); return *k; }
	inline K& Add(const K& v) { K* k = new K(v); l.Add(k); return *k; }
	inline K& Add(K* k) { l.Add(k); return *k; }
	inline K& Insert(int i) {return *l.Insert(i, new K());}
	inline K& Insert(int i, const K& key) {return *l.Insert(i, new K(key));}
	inline int GetCount() const { return l.GetCount(); }
	inline bool IsEmpty() const { return GetCount() == 0; }
	inline K* Detach(int i) {K* o = l[i]; l.Remove(i); return o;}

	inline K& operator[](int i) {
		ASSERT(i >= 0 && i < l.GetCount());
		K** it = l.Get();
		it = it + i;
		return **it;
	}
	inline const K& operator[](int i) const {
		ASSERT(i >= 0 && i < l.GetCount());
		return **(l.Get() + i);
	}

	inline void Remove(int i) {
		ASSERT(i >= 0 && i < l.GetCount());
		delete *(l.Get() + i);
		l.Remove(i);
	}
	//void Remove(const Vector<int>& sorted_list) {Remove(sorted_list.Begin(), sorted_list.GetCount());}
	inline void Remove(const int* sorted_list, int n) {
		if(!n) return;
		const int* it  = sorted_list;
		const int* end = sorted_list + n;
		K** vector = l.Get();
		while (it != end)
			Destruct(**(vector + *it++));
		l.Remove(sorted_list, n);
	}
	inline void RemoveLast() {ASSERT(GetCount()); Remove(GetCount()-1);}
	inline void Clear() {
		DynArray<K*> tmp;
		Swap(tmp, l);
		K** ptr = tmp.Get();
		K** end = ptr + tmp.GetCount();
		while (ptr != end)
			delete *(ptr++);
	}

	inline K& Top() {
		ASSERT(GetCount() > 0);
		return **(l.Get() + l.GetCount() - 1);
	}
	inline void operator <<=(const Array& a) {
		Clear();
		l.SetCount(a.GetCount(), 0);
		for (int i = 0; i < a.GetCount(); i++)
			l[i] = new K(*a.l[i]);
	}
	
	inline Array<K>& operator<<(const K& v) { Add(v); return *this; }
	
};



template <class K> class Index {
	$MakeMoveable();
	
	DynArray<unsigned int> hashes;
	DynArray<K> values;

public:
	typedef FwdPtrIterator<K> Iterator;
	typedef BwdPtrIterator<K> RIterator;
	
	inline Index() {}

	inline FwdPtrIterator<K>			Begin() {return Iterator(values.Begin());}
	inline FwdPtrIterator<K>			begin() {return Iterator(values.Begin());}
	inline FwdPtrIterator<K>			End() {return Iterator(values.End());}
	inline FwdPtrIterator<K>			end() {return Iterator(values.End());}
	inline ConstFwdPtrIterator<K>	Begin() const {return Iterator(values.Begin());}
	inline ConstFwdPtrIterator<K>	End() const {return Iterator(values.End());}
	inline K* Get() {return values.Get();}
	inline K* GetEnd() {return values.GetEnd();}
	
	inline const K& operator[](int i) const {
		ASSERT(i >= 0 && i < values.GetCount());
		return values[i];
	}

	inline void Set(const Index& i) {
		hashes <<= i.hashes;
		values <<= i.values;
	}
	inline int GetCount() const { return values.GetCount(); }
	inline const K& Add(const K& value) {
		uint32 hash = GetValueHash(value);
		if (FindHash(hash) >= 0)
			throw Exc("Index has value already");
		hashes.Add(hash);
		return values.Add(value);
	}
	inline K& Insert(int i, const K& value) {
		uint32 hash = GetValueHash(value);
		if (FindHash(hash) >= 0)
			throw Exc("Index has value already");
		hashes.Insert(i, hash);
		return values.Insert(i, value);
	}
	inline int Find(const K& key) const { return FindHash(GetValueHash(key)); }
	inline int FindAdd(const K& key) {int i = Find(key); if (i >= 0) return i; i = GetCount(); Add(key); return i;}

	inline int FindHash(uint32 hash) const {
		unsigned int* begin = hashes.Get();
		unsigned int* it = begin;
		unsigned int* end = begin + hashes.GetCount();
		while(it != end) {
			if (*it == hash)
				return it - begin;
			it++;
		}
		return -1;
	}

	inline void Clear() { hashes.Clear(); values.Clear(); }
	inline void Remove(int i) { hashes.Remove(i); values.Remove(i); }
	inline void RemoveLast() {ASSERT(GetCount()); if (GetCount()) Remove(GetCount()-1);}
	inline void RemoveKey(const K& key) {int i = Find(key); if (i >= 0) Remove(i);}
	
	inline void operator <<=(const Index& a) {Set(a);}
};


auto declaration MakeMap(identifier Map, identifier Array, bool is_ptr_iter) {
	template <class K, class V>
	class $Map {
		Index<K> keys;
		${Array}<V> values;
		
	public:
		typedef Index<K> IndexK;
		typedef ${Array}<V> ArrayV;
		typedef ${Map}<K, V> MapKV;
		
		inline ${Map}() {}
		
		inline const Index<K>& GetKeys() const {return keys;}
		inline const ${Array}<V>& GetValues() const {return values;}
		inline ${Array}<V>& GetValues() {return values;}
		
		inline V& Add(const K& key) {
			keys.Add(key);
			return values.Add();
		}
	
		inline V& Add(const K& key, const V& value) {
			keys.Add(key);
			return values.Add(value);
		}
		
		inline V& Add(const K& key, V* value) {
			keys.Add(key);
			return values.Add(value);
		}
		
		inline V& GetAdd(const K& key) {
			int i = keys.Find(key);
			if (i >= 0) return values[i];
			keys.Add(key);
			return values.Add();
		}
		
		inline V& Insert(int i, const K& key) {keys.Insert(i, key); return values.Insert(i);}
		inline V& Insert(int i, const K& key, const V& value) {keys.Insert(i, key); return values.Insert(i, value);}
		
		inline const K& GetKey(int i) const { return keys[i]; }
	
		inline const V& At(int i) const {
			ASSERT(i >= 0 && i < values.GetCount());
			return values[i];
		}
	
		inline V& At(int i) {
			ASSERT(i >= 0 && i < values.GetCount());
			return values[i];
		}
		
		inline const V& operator[](int i) const {return At(i);}
		inline V& operator[](int i) {return At(i);}
		
		inline V& Top() { ASSERT(GetCount() > 0); return values.Top(); }
	
		inline int Find(const K& key) const { return keys.Find(key); }
		inline V& Get(const K& key) { return values[Find(key)]; }
		inline V  Get(const K& key, V value) const {int i = Find(key); if (i < 0) return value; return values[i]; }
		inline int GetCount() const { return keys.GetCount(); }
		inline bool IsEmpty() const { return GetCount() == 0; }
	
		inline void RemoveKey(const K& key) {int i = Find(key); if (i >= 0) Remove(i);}
		inline void Remove(int i) { ASSERT(i >= 0 && i < keys.GetCount()); keys.Remove(i); values.Remove(i); }
		inline void Clear() {
			keys.Clear();
			values.Clear();
		}
		
		inline void operator <<=(const ${Map}& a) {
			keys <<= a.keys;
			values <<= a.values;
		}
		
		
		auto if (!$is_ptr_iter) {
			public typedef FwdPairIterator<K,V> Iterator;
			public typedef BwdPairIterator<K,V> RIterator;
			inline int GetPos(const Iterator& it) {
				K* begin = keys.Get();
				K* cur = &it.Key();
				int pos = cur - begin;
				return pos;
			}
			inline void								Remove(const Iterator& it) {Remove(GetPos(it));}
			inline FwdPairIterator<K,V>			InsertIterator(const Iterator& it, const K& key, const V& value) {int pos = GetPos(it); Insert(pos, key, value); Iterator cur = Begin(); cur += pos; return cur;}
			inline FwdPairIterator<K,V>			InsertIterator(const Iterator& it, const K& key, V* value) {int pos = GetPos(it); Insert(pos, key, value); Iterator cur = Begin(); cur += pos; return cur;}
			inline FwdPairIterator<K,V>			InsertIterator(const Iterator& it, const K& key) {int pos = GetPos(it); Insert(pos, key); Iterator cur = Begin(); cur += pos; return cur;}
			inline FwdPairIterator<K,V>			FindIterator(const K& key) const {
				Iterator it = Begin();
				int pos = Find(key);
				if (pos == -1)	it += GetCount();
				else			it += pos;
				return it;
			}
			inline FwdPairIterator<K,V>			Begin() {return Iterator(keys.Get(), values.Get());}
			inline FwdPairIterator<K,V>			End() {return Iterator(keys.GetEnd(), values.GetEnd());}
			inline ConstFwdPairIterator<K,V>		Begin() const {return Iterator(keys.Get(), values.Get());}
			inline ConstFwdPairIterator<K,V>		End() const {return Iterator(keys.GetEnd(), values.GetEnd());}
			inline FwdPairIterator<K,V>			begin() {return Begin();}
			inline FwdPairIterator<K,V>			end() {return End();}
			inline ConstFwdPairIterator<K,V>		begin() const {return Begin();}
			inline ConstFwdPairIterator<K,V>		end() const {return End();}
		}
		else {
			public typedef FwdPairPtrIterator<K,V> Iterator;
			public typedef BwdPairPtrIterator<K,V> RIterator;
			inline int GetPos(const Iterator& it) {
				K* begin = keys.Get();
				K* cur = &it.Key();
				int pos = cur - begin;
				return pos;
			}
			inline void								Remove(const Iterator& it) {Remove(GetPos(it));}
			inline FwdPairPtrIterator<K,V>		InsertIterator(const Iterator& it, const K& key, const V& value) {int pos = GetPos(it); Insert(pos, key, value); Iterator cur = Begin(); cur += pos; return cur;}
			inline FwdPairPtrIterator<K,V>		InsertIterator(const Iterator& it, const K& key, V* value) {int pos = GetPos(it); Insert(pos, key, value); Iterator cur = Begin(); cur += pos; return cur;}
			inline FwdPairPtrIterator<K,V>		InsertIterator(const Iterator& it, const K& key) {int pos = GetPos(it); Insert(pos, key); Iterator cur = Begin(); cur += pos; return cur;}
			inline FwdPairPtrIterator<K,V>		FindIterator(const K& key) const {
				Iterator it = Begin();
				int pos = Find(key);
				if (pos == -1)	it += GetCount();
				else			it += pos;
				return it;
			}
			inline FwdPairPtrIterator<K,V>		Begin() {return Iterator(keys.Get(), values.Get());}
			inline FwdPairPtrIterator<K,V>		End() {return Iterator(keys.GetEnd(), values.GetEnd());}
			inline ConstFwdPairPtrIterator<K,V>	Begin() const {return Iterator(keys.Get(), values.Get());}
			inline ConstFwdPairPtrIterator<K,V>	End() const {return Iterator(keys.GetEnd(), values.GetEnd());}
			inline FwdPairPtrIterator<K,V>		begin() {return Begin();}
			inline FwdPairPtrIterator<K,V>		end() {return End();}
			inline ConstFwdPairPtrIterator<K,V>	begin() const {return Begin();}
			inline ConstFwdPairPtrIterator<K,V>	end() const {return End();}
		}
	};
}

$MakeMap(VectorMap, Vector, 0);
$MakeMap(ArrayMap, Array, 1);





template<class I, class P>
inline I FindIf(I first, I last, P pred) {
	while (first != last) {
		int i = pred.P::operator()(*first);
		if (i) return first;
			
		++first;
	}
	
	return last;
}












auto declaration MakeFixedArray(token I) {
	template <class T>
	struct FixedArray$I {
		static const int size = $I;
		
		T vector[$I];
		
		inline T&       operator[](int i)				{ASSERT(i >= 0 && i < size); return vector[i];}
		inline const T& operator[](int i) const		{ASSERT(i >= 0 && i < size); return vector[i];}
		inline void operator=(const T& value)			{for(int i = 0; i < size; i++) this->vector[i] = value;}
		inline void operator=(const FixedArray$I& value)	{for(int i = 0; i < size; i++) this->vector[i] = value.vector[i];}
	};
}

$MakeFixedArray(2);


auto declaration MakeTopValueSorter(token I, token Key=int, token Value=double) {
	struct TopValueSorter$I {
		static const int size = $I;
		typedef $Key Key;
		typedef $Value Value;
		
		Key		key[$I];
		Value	value[$I];
		int		count = 0;
		
		
		TopValueSorter${I}() {Reset();}
		void Reset() {
			count = 0;
			for(int i = 0; i < size; i++) {
				value[i] = -DBL_MAX;
				key[i] = -1;
			}
		}
		void Add(const Key& key, const Value& value) {
			if (value <= this->value[size-1])
				return;
			for(int i = 0; i < size; i++) {
				if (value > this->value[i]) {
					for(int j = size-1; j > i; j--) {
						this->value[j] = this->value[j-1];
						this->key[j]   = this->key[j-1];
					}
					this->value[i] = value;
					this->key[i] = key;
					count = Min(count+1, size);
					break;
				}
			}
		}
		void Serialize(StreamBase& s) {
			for(int i = 0; i < size; i++)
				s % value[i] % key[i];
		}
	};
}

$MakeTopValueSorter(10);



template <class T>
class TreeArray {
	
public:
	typedef TreeArray<T> PA;
	
private:
	PA* down = NULL;
	Array<T> branch;
	
protected:
	
	inline T& Add() {T& t = branch.Add(); t.down = this; return t;}
	inline T& Insert(int i) {T& t = branch.Insert(i); t.down = this; return t;}
	
	inline void Copy(const PA& src) {branch <<= src.branch; for(int i = 0; i < branch.GetCount(); i++) branch[i].down = this;}
	
public:
	
	inline T* GetParent() const {return down;}
	inline T& Add(T* n) {ASSERT(n->down == NULL); T& t = branch.Add(n); t.down = this; return t;}
	inline T& Insert(int i, T* n) {ASSERT(n->down == NULL); T& t = branch.Insert(i, n); t.down = this; return t;}
	
	inline void Clear() {branch.Clear();}
	inline void Remove(int i) {branch.Remove(i);}
	inline void Remove(int i, int count) {branch.Remove(i, count);}
	inline void RemoveLast() {branch.Remove(branch.GetCount()-1);}
	inline T* Detach(int i) {T* t = branch.Detach(i); t->down = NULL; return t;}
	
	inline T& At(int i) {return branch[i];}
	inline T& AtTop(int i) {if (i < branch.GetCount()) return branch[i]; return branch.Top();}
	inline T& At(int i, T& n) {if (i < branch.GetCount()) return branch[i]; return n;}
	inline const T& At(int i) const {return branch[i];}
	inline T& Top() {return branch.Top();}
	
	inline int GetCount() const {return branch.GetCount();}
	inline bool IsEmpty() const {return branch.IsEmpty();}
	
	inline void SortByInt() {
		struct Sorter {
			bool operator() (const T& a, const T& b) const {return a.GetInt() < b.GetInt();}
		};
		Sort(branch, Sorter());
	}
	
	inline void Serialize(StreamBase& s) {
		s % branch;
		if (s.IsLoading())
			for(int i = 0; i < branch.GetCount(); i++)
				branch[i].down = this;
	}
};













struct SortedIntMap {
	DynArray<DynArray<int> > data;
	DynArray<uint64> value_mask;
	int count = 0;
	int first_data_i = INT_MAX;
	
	void Reserve(int count) {
		if (count > data.GetCount()) {
			data.SetCount(count);
			int value_count = count / 64 + 1;
			value_mask.SetCount(value_count, 0);
		}
	}
	
	void Clear() {
		{
			FwdIterator<DynArray<int> > it = data.Begin();
			FwdIterator<DynArray<int> > end = data.End();
			for (; it != end; ++it) it->SetCount(0);
		}
		{
			FwdIterator<uint64> it = value_mask.Begin();
			FwdIterator<uint64> end = value_mask.End();
			for (; it != end; ++it) *it = 0;
		}
		//for(int i = 0; i < data.GetCount(); i++) data[i].SetCount(0);
		//for(int i = 0; i < value_mask.GetCount(); i++) value_mask[i] = 0;
		count = 0;
		first_data_i = INT_MAX;
	}
	
	void Add(int key, int value) {
		DynArray<int>& key_vec = data[key];
		if (key_vec.IsEmpty()) {
			int mask_i = key / 64;
			int64 bit_i = key % 64;
			uint64& v = value_mask[mask_i];
			uint64 add = 1LL << bit_i;
			v |= add;
		}
		key_vec.Add(value);
		count++;
		if (key < first_data_i)
			first_data_i = key;
	}
	
};








// Destroying objects might be costly and pointless in some code, so use this.
template <class T>
struct CachingVector {
	$MakeMoveable();
	
	typedef Vector<T> Vec;
	Vector<T> data;
	int count = 0;


	const T& operator[](int i) const {return data[i];}
	T& operator[](int i) {return data[i];}
	int GetCount() const {return count;}
	void SetCount(int i) {if (data.GetCount() < i) data.SetCount(i); count = i;}
	typename FwdIterator<T> begin() {return data.begin();}
	typename FwdIterator<T> Begin() {return data.begin();}
	typename FwdIterator<T> end() {return data.begin() + count;}
	typename FwdIterator<T> End() {return data.begin() + count;}
};










}

#define Pick				Container::Pick
#define Swap				Container::Swap
#define Reverse				Container::Reverse
#define One					Container::One
#define FutureOne			Container::FutureOne
#define Optional			Container::Optional
#define Vector				Container::Vector
#define VectorPtr			Container::VectorPtr
#define Array				Container::Array
#define Index				Container::Index
#define VectorMap			Container::VectorMap
#define ArrayMap			Container::ArrayMap
#define FindIf				Container::FindIf
#define FixedArray2			Container::FixedArray2
#define TopValueSorter10	Container::TopValueSorter10
#define CachingVector		Container::CachingVector

