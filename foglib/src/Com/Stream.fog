


namespace Stream {


/*struct Console {
	
	static int Get(char* buf, int size);
	static void Put(const char* msg);
	
};*/


!inline struct CharStream : public StreamBase {
	
	CharStream& operator << (String s) {s.Serialize(*this); return *this;}
	CharStream& operator << (const char* s) {Serialize(s, *this); return *this;}
	CharStream& operator << (int i) {IntStr(i).Serialize(*this); return *this;}
	String GetString(int size) {
		Vector<char> v;
		v.SetCount(size, 0);
		Get(v.Begin(), size);
		return String(v.Begin());
	}
	String GetLine(int max = UINT16_MAX) {
		String out;
		while (!IsEof() && out.GetCount() < max) {
			char chr;
			Get(&chr, 1);
			if (chr == '\n')
				break;
			out.Cat(chr);
		}
		return out;
	}
	
};

!inline class FileIn : public CharStream {
	typedef Native::FILE FILE;
	FILE* s = 0;

public:
	FileIn() {}
	FileIn(FILE* s) : s(s) {}
	FileIn(String path) {Open(path);}
	~FileIn() { Close(); }
	
	virtual bool IsLoading() { return true; }
	virtual bool IsOpen() const { return s != NULL; }
	virtual bool IsEof() { if (!s) return true; return IsFileEnd(s); }

	bool Open(String path) {
		if (s) Native::FileClose(s);
		Native::FileOpen(&s, path.Begin(), false, false);
		return s != NULL;
	}

	void Close() {
		if (s) Native::FileClose(s); s = NULL;
	}

	virtual String Get(int size) {
		if (!s || !size) return String();
		ASSERT(size > 0);
		int pos = Native::FileTell(s);
		Vector<char> v;
		v.SetCount(size + 1, 0);
		char* it = v.Begin();
		int left = size;
		int total_read = 0;
		while (left > 0) {
			int read_size = Native::FileRead(it, 1, left, s);
			left -= read_size;
			it += read_size;
			total_read += read_size;
			if (!read_size)
				break;
		}
		String out;
		out.Set(v.Begin(), total_read+1, false);
		return out;
	}

	String GetText(int size) {
		if (!s) return "";
		Vector<char> v;
		v.SetCount(size+1);
		v[size] = 0;
		size_t read_size = Native::FileRead(v.Begin(), 1, size, s);
		return v.Get();
	}

	virtual int Get(void* mem, int size) {
		if (!s) return 0;
		int64 ret = Native::FileRead(mem, size, 1, s) * size;
		ASSERT(ret < INT_MAX);
		return (int)ret;
	}

	virtual int64 GetCursor() { if (!s) return 0; return Native::FileTell(s); }

	virtual int64 GetSize() const {
		if (!s) return 0;
		long pos = Native::FileTell(s);
		FileSeekEnd(s, 0);
		int size = Native::FileTell(s);
		FileSeekSet(s, pos);
		return size;
	}

	virtual void Seek(int64 i) { Native::FileSeekSet(s, (long)i); }

};


String LoadFile(String path);


!inline struct FileOut : public CharStream {
	typedef Native::FILE FILE;
	FILE* s = NULL;

public:
	FileOut() {}
	FileOut(FILE* s) : s(s) {}
	FileOut(String path) {Open(path);}
	~FileOut() { Close(); }

	virtual bool IsStoring() { return true; }

	virtual bool IsOpen() const { return s != NULL; }
	virtual bool IsEof() { if (!s) return true; return Native::IsFileEnd(s); }

	bool Open(String path) {
		if (s) Native::FileClose(s);
		return s != NULL;
	}

	void Close() {
		if (s) { Native::FileFlush(s); Native::FileClose(s); s = NULL; }
	}

	/*virtual StreamBase& operator << (String str) {
		Put(str.Begin(), str.GetCount());
		return *this;
	}
	virtual StreamBase& operator << (int i) {
		String str = IntStr(i);
		Put(str.Begin(), str.GetCount());
		return *this;
	}*/

	virtual int Put(const void* mem, int size) {
		if (!s) return 0;
		int64 ret = Native::FileWrite(mem, size, 1, s) * size;
		ASSERT(ret < INT_MAX);
		return (int)ret;
	}
	virtual int Put(char c) { return Put(&c, 1); }

	virtual void Flush() { if (s) Native::FileFlush(s); }
	
	virtual int64 GetCursor() { if (!s) return 0; return Native::FileTell(s); }

	virtual int64 GetSize() const {
		if (!s) return 0;
		long pos = Native::FileTell(s);
		Native::FileSeekSet(s, 0);
		int size = Native::FileTell(s);
		Native::FileSeekSet(s, pos);
		return size;
	}
	
};

extern FileIn cin;
extern FileOut cout, cerr;



class StringStream : public CharStream {
	Vector<char> s;
	int64 cursor = 0;
	bool is_storing = true;
	
public:
	StringStream() {}

	virtual bool IsLoading()	{ return !is_storing; }
	virtual bool IsStoring()	{ return is_storing; }
	virtual bool IsEof()		{ return cursor >= s.GetCount(); }
	
	void SetStoring()			{is_storing = true;}
	void SetLoading()			{is_storing = false;}
	
	virtual StreamBase& operator << (String str) {
		Put(str.Begin(), str.GetCount());
		return *this;
	}
	virtual StreamBase& operator << (int i) {
		String str = IntStr(i);
		Put(str.Begin(), str.GetCount());
		return *this;
	}
	virtual int Put(const void* mem, int size) {
		int64 end = cursor + size;
		ASSERT(end < INT_MAX);
		if (end > s.GetCount())
			s.SetCount((int)end);
		char* dst = s.Begin() + cursor;
		const char* src = (const char*)mem;
		MemoryCopy(dst, src, size);
		cursor += size;
		return size;
	}
	virtual int Put(char c) { return Put(&c, 1); }
	virtual int Get(void* mem, int size) {
		int64 sz = Min((int64)size, (int64)s.GetCount() - cursor);
		if (sz <= 0) return 0;
		ASSERT(sz < INT_MAX);
		char* b = (char*)mem;
		MemoryCopy(b, s.Begin() + cursor, (int)sz);
		cursor += sz;
		return (int)sz;
	}
	virtual int64 GetCursor() { return cursor; }
	virtual int64 GetSize() const {return s.GetCount();}

	virtual void Seek(int64 i) { cursor = i; }
	String GetResult() { return String(s.Begin(), s.GetCount()); }
};


class MemReadStream : public CharStream {
	const char* buf;
	int64 size = 0;
	int64 cursor = 0;
	
public:
	MemReadStream(const char* buf, int64 size) : buf(buf), size(size) {}

	virtual bool IsLoading() { return true; }
	virtual bool IsStoring() { return false; }
	virtual bool IsEof() { return cursor >= size; }
	
	virtual int Get(void* mem, int size) {
		int64 sz = Min<int64>(size, size - cursor);
		if (sz <= 0) return 0;
		ASSERT(sz < INT_MAX);
		char* b = (char*)mem;
		MemoryCopy(b, buf + cursor, (int)sz);
		cursor += sz;
		return (int)sz;
	}
	virtual int64 GetCursor() { return cursor; }
	virtual void Seek(int64 i) { cursor = i; }
	virtual int64 GetSize() const {return size;}
};


template <class T>
bool LoadFromFile(T& o, String path) {
	FileIn fin(path);
	if (!fin.IsOpen())
		return false;
	fin % o;
	return !fin.IsCorrupted();
}

template <class T>
bool StoreToFile(T& o, String path) {
	FileOut fout(path);
	if (!fout.IsOpen())
		return false;
	fout % o;
	return !fout.IsCorrupted();
}





class AudioFrame {
	
	
public:
	virtual ~AudioFrame() {}
	
};

class VideoFrame {
	
	
public:
	virtual ~VideoFrame() {}
	
};

class MediaStream {
	
	
public:
	
	virtual bool Initialize(AudioFrame& a, VideoFrame& v) = 0;
	virtual String GetLastError() const {return "unknown";}
	
};

}

#define CharStream			Stream::CharStream
#define FileIn				Stream::FileIn
#define FileOut				Stream::FileOut
#define LoadFile			Stream::LoadFile
#define StringStream		Stream::StringStream
#define MemReadStream		Stream::MemReadStream
#define LoadFromFile		Stream::LoadFromFile
#define StoreToFile			Stream::StoreToFile
#define AudioFrame			Stream::AudioFrame
#define VideoFrame			Stream::VideoFrame
#define MediaStream			Stream::MediaStream
