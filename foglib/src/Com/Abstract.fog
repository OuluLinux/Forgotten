namespace Abstract {


class StreamBase;


auto declaration PrimSerialize(token type_id) {
	inline void Serialize(${type_id}& o, StreamBase& s) {
		if (s.IsLoading())
			s.Get(&o, sizeof(${type_id}));
		else if (s.IsStoring())
			s.Put(&o, sizeof(${type_id}));
	};
};
template <class T> inline void Serialize(T& o, StreamBase& s) {o.Serialize(s);}
$PrimSerialize(bool);
$PrimSerialize(char);
$PrimSerialize(unsigned char);
$PrimSerialize(short);
$PrimSerialize(unsigned short);
$PrimSerialize(int);
$PrimSerialize(unsigned int);
$PrimSerialize(long long);
$PrimSerialize(unsigned long long);
$PrimSerialize(float);
$PrimSerialize(double);
inline void Serialize(const char* o, StreamBase& s) {
	ASSERT(s.IsStoring());
	if (s.IsStoring()) {
		int len = StringLength(o);
		s.Put(&len, sizeof(len));
		if (len > 0)
			s.Put(o, len);
	}
}

class StreamBase {
	bool corrupted = false;
public:
	typedef Native::FILE FILE;
	StreamBase() {}
	
	bool IsCorrupted() const {return corrupted;}
	void SetCorrupted(bool b=true) {corrupted = b;}
	
	virtual bool IsOpen() const { return false; }

	virtual bool IsLoading() { return false; }
	virtual bool IsStoring() { return false; }
	virtual bool IsEof() { return false; }

	virtual int Put(const void* mem, int size) { return 0; }
	virtual int PutByte(int i) {char c=i; return Put(&c, 1); }
	virtual int Get(void* mem, int size) { return 0; }
	virtual int GetByte() {byte b = 0; Get(&b, 1); return b;}
	virtual int64 GetCursor() { return 0; }
	virtual void Seek(int64 i) {}
	virtual int64 GetSize() const {return 0;}
	
	virtual void Flush() {};
	
	template <class T>
	StreamBase& operator%(T& o) {Serialize(o, *this); return *this;}
	
	
	
};


}

#define StreamBase			Abstract::StreamBase
