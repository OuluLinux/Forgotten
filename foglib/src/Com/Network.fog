namespace Network {


namespace Native {
	
const char* GetIpStringFromDword(dword d);


struct StdTcpSocket {
	!inline StdTcpSocket()						:{ export/noimplementation; };
	!inline ~StdTcpSocket()						:{ export/noimplementation; };
	bool Listen(int port, int max_conn,
		bool ip6, const char* addr)				:{ export/noimplementation; };
	bool Accept(StdTcpSocket& sock)				:{ export/noimplementation; };
	bool IsOpen()								:{ export/noimplementation; };
	void Close()								:{ export/noimplementation; };
	int Put(const void* data, int size)			:{ export/noimplementation; };
	int Get(void* data, int size)				:{ export/noimplementation; };
	bool Connect(const char* addr, int port)	:{ export/noimplementation; };
	void Timeout(int ms)						:{ export/noimplementation; };
	void GetPeerAddr(char* buf, int bufsize)	:{ export/noimplementation; };
	const char* GetLastError()					:{ export/noimplementation; };
	static StdTcpSocket* Create()				:{ export/noimplementation; };
};


class StdWebSocketServer {
public:
	
	void SetVerbose(bool b)				:{ export/noimplementation; };
	void Run(int port)					:{ export/noimplementation; };
	void StopListening()				:{ export/noimplementation; };
	void Close()						:{ export/noimplementation; };
	//void Put(void* data, int data_len)	:{ export/noimplementation; };
	void SetMessageCallback(void (*fn)(void*, int, const char*, int), void* arg)
										:{ export/noimplementation; };
	static StdWebSocketServer* Create()	:{ export/noimplementation; };
};


class StdWebSocketClient {
public:
	
	void SetVerbose(bool b)				:{ export/noimplementation; };
	void Run(const char* ws_url)		:{ export/noimplementation; };
	void Put(void* data, int data_len)	:{ export/noimplementation; };
	void Close()						:{ export/noimplementation; };
	void SetMessageCallback(void (*fn)(void*, const char*, int), void* arg)
										:{ export/noimplementation; };
	static StdWebSocketClient* Create()	:{ export/noimplementation; };
};


#define ENET_HOST_ANY       0
#define ENET_HOST_BROADCAST 0xFFFFFFFFU
#define ENET_PORT_ANY       0

void NetInitialize();
void NetDeinitialize();

struct NetAddress {
	uint32 host;
	uint16 port;
};

struct NetPacket {
	void Clear()									:{ export/noimplementation; };
	void Append(void* data, int len)				:{ export/noimplementation; };
	
	static NetPacket* Create(void* data, int len, bool is_reliable) :{ export/noimplementation; };
};


struct NetPeer {
	void Disconnect()				:{ export/noimplementation; };
	void Reset()					:{ export/noimplementation; };
	void*& GetDataRef()				:{ export/noimplementation; };
	void SetData(dword d)			:{ export/noimplementation; };
	void Send(int channel, NetPacket* packet) :{ export/noimplementation; };
	
	bool IsConnecting() const		:{ export/noimplementation; };
	bool IsConnected() const		:{ export/noimplementation; };
	bool IsDisconnected() const		:{ export/noimplementation; };
	dword GetData() const			:{ export/noimplementation; };
	int GetState() const			:{ export/noimplementation; };
	const char* GetAddr() const		:{ export/noimplementation; };
	int GetPort() const				:{ export/noimplementation; };
	
};


struct NetEvent {
	bool		IsConnected() const		:{ export/noimplementation; };
	bool		IsData() const			:{ export/noimplementation; };
	bool		IsDisconnected() const	:{ export/noimplementation; };
	int			GetEventType() const	:{ export/noimplementation; };
	const char*	GetPeerAddr() const		:{ export/noimplementation; };
	int			GetPeerPort() const		:{ export/noimplementation; };
	int			GetDataSize() const		:{ export/noimplementation; };
	const char*	GetData() const			:{ export/noimplementation; };
	const char*	GetDataString() const	:{ export/noimplementation; };
	int			GetChannel() const		:{ export/noimplementation; };
	NetPeer*	GetPeer() const			:{ export/noimplementation; };
};

struct NetHost {
	
	
	void Flush()								:{ export/noimplementation; };
	void DisconnectPeers()						:{ export/noimplementation; };
	void ResetPeers()							:{ export/noimplementation; };
	void Destroy()								:{ export/noimplementation; };
	NetPeer* Connect(const char* addr, int port, int channels, int timeout) :{ export/noimplementation; };
	int Poll(NetEvent* event, int timeout)		:{ export/noimplementation; };
	void Broadcast(int channel, NetPacket* p)	:{ export/noimplementation; };
	int GetPeerCount() const					:{ export/noimplementation; };
	NetPeer* Begin()							:{ export/noimplementation; };
	NetPeer* End()								:{ export/noimplementation; };
	
	static NetHost* Create(
		NetAddress* addr,
		int max_clients,
		int channels,
		int incoming_bandwidth,
		int outgoing_bandwidth)					:{ export/noimplementation; };
	
};

}


class TcpSocket {
	typedef Native::StdTcpSocket Std;
	One<Std> s;
	
public:
	TcpSocket() {s.Create();}
	~TcpSocket() {}
	
	bool Listen(int port, int max_conn, bool ip6=false, const char* addr="127.0.0.1") {return s->Listen(port, max_conn, ip6, addr);}
	bool Accept(TcpSocket& sock) {return s->Accept(*sock.s);}
	bool IsOpen() {return s->IsOpen();}
	void Close() {s->Close();}
	String GetLine(int max_len = UINT16_MAX);
	String GetPeerAddr() {char b[1024]; s->GetPeerAddr(b, 1024); return b;}
	int Put(String str) {return Put((void*)str.Begin(), str.GetCount());}
	int Put(const void* data, int size) {return s->Put(data, size);}
	int Get(void* data, int size) {return s->Get(data, size);}
	String Get(int size);
	bool Connect(String addr, int port) {return s->Connect(addr.Begin(), port);}
	void Timeout(int ms) {s->Timeout(ms);}
};












inline int PutInverseByteOrder(TcpSocket& out, void* data, int count) {
	if (count <= 0) return 0;
	thread_local static Vector<byte> tmp;
	tmp.SetCount(count);
	const byte* src = ((const byte*)data) + count - 1;
	FwdIterator<byte> it = tmp.Begin();
	FwdIterator<byte> end = tmp.End();
	for(; it != end; ++it)
		*it = *src--;
	int res = out.Put(tmp.Begin(), count);
	return res;
}
inline int GetInverseByteOrder(TcpSocket& in, void* data, int count) {
	if (count <= 0) return 0;
	thread_local static Vector<byte> tmp;
	tmp.SetCount(count);
	int res = in.Get(tmp.Begin(), count);
	tmp.SetCount(res);
	byte* dst = ((byte*)dst) + res - 1;
	FwdIterator<byte> it = tmp.Begin();
	FwdIterator<byte> end = tmp.End();
	for(; it != end; ++it)
		*dst-- = *it;
	return res;
}
inline int PutInverseByteOrder(StreamBase& out, void* data, int count) {
	if (count <= 0) return 0;
	thread_local static Vector<byte> tmp;
	tmp.SetCount(count);
	const byte* src = ((const byte*)data) + count - 1;
	FwdIterator<byte> it = tmp.Begin();
	FwdIterator<byte> end = tmp.End();
	for(; it != end; ++it)
		*it = *src--;
	out.Put(tmp.Begin(), count);
	return count;
}
inline int GetInverseByteOrder(StreamBase& in, void* data, int count) {
	if (count <= 0) return 0;
	thread_local static Vector<byte> tmp;
	tmp.SetCount(count);
	int res = in.Get(tmp.Begin(), count);
	tmp.SetCount(res);
	byte* dst = ((byte*)dst) + res - 1;
	FwdIterator<byte> it = tmp.Begin();
	FwdIterator<byte> end = tmp.End();
	for(; it != end; ++it)
		*dst-- = *it;
	return res;
}

#ifdef CPU_LITTLE_ENDIAN
inline int BEPut(TcpSocket& out, void* data, int count) {return PutInverseByteOrder(out, data, count);}
inline int BEGet(TcpSocket& in, void* data, int count) {return GetInverseByteOrder(in, data, count);}
inline int BEPut(StreamBase& out, void* data, int count) {return PutInverseByteOrder(out, data, count);}
inline int BEGet(StreamBase& in, void* data, int count) {return GetInverseByteOrder(in, data, count);}
inline int LEPut(StreamBase& out, void* data, int count) {out.Put(data, count); return count;}
inline int LEGet(StreamBase& in, void* data, int count) {return in.Get(data, count);}
#else
inline int BEPut(TcpSocket& out, void* data, int count) {return out.Put(data, count);}
inline int BEGet(TcpSocket& in, void* data, int count) {return in.Get(data, count);}
inline int BEPut(StreamBase& out, void* data, int count) {return out.Put(data, count);}
inline int BEGet(StreamBase& in, void* data, int count) {return in.Get(data, count);}
inline int LEGet(StreamBase& in, void* data, int count) {return GetInverseByteOrder(in, data, count);}
inline int LEPut(StreamBase& out, void* data, int count) {return PutInverseByteOrder(out, data, count);}
#endif

String GetIpStringFromDword(dword b);



inline dword& GetDwordRef(void*& ptr) {return *((dword*)&ptr);}

struct SocketPeer {
	$MakeMoveable();
	
	Native::NetPeer* peer = NULL;
	
	
	SocketPeer() {}
	SocketPeer(Native::NetPeer* peer) : peer(peer) {}
	SocketPeer(const SocketPeer& p) {*this = p;}
	void operator=(const SocketPeer& p) {peer = p.peer;}
	void SetData(dword d) {if (peer) peer->SetData(d);}
	
	void Disconnect(int timeout=3000) {
		if (peer) {
			peer->Disconnect();
			TimeStop ts;
			while (ts.Elapsed() < timeout && !peer->IsDisconnected())
				Sleep(1);
			peer->Reset();
		}
	}
	bool operator==(const SocketPeer& p) const {return peer == p.peer;}
	bool IsEmpty() const {return !peer;}
	bool IsConnecting() const {return peer && peer->IsConnecting();}
	bool IsConnected() const {return peer && peer->IsConnected();}
	dword GetData() const {if (peer) return peer->GetData(); return 0;}
	int GetState() const {if (peer) return peer->GetState(); return -1;}
	String GetAddr() const {if (peer) return peer->GetAddr(); return "NULL";}
	int GetPort() const {if (peer) peer->GetPort(); return -1;}
	
};



class SocketPacket {
	$MakeMoveable();
	
	Native::NetPacket* packet = NULL;
	
	void SetSent() {packet = NULL;}
	
public:
	SocketPacket() {}
	SocketPacket(String data, bool is_reliable=false) {Set(data, is_reliable);}
	SocketPacket(const char* data, int len, bool is_reliable=false) {Set(data, len, is_reliable);}
	//SocketPacket(SocketPacket&& p) : packet(p.packet) {p.packet = NULL;}
	~SocketPacket() {Clear();}
	void Clear() {if (packet) packet->Clear();}
	
	void Set(String data, bool is_reliable) {Clear(); packet = Native::NetPacket::Create((void*)data.Begin(), data.GetCount(), is_reliable);}
	void Set(const char* data, int len, bool is_reliable) {Clear(); packet = Native::NetPacket::Create((void*)data, len, is_reliable);}
	void Append(String data) {if (packet) packet->Append((void*)data.Begin(), data.GetCount());}
	void Append(const char* data, int len) {if (packet) packet->Append((void*)data, len);}
	bool IsEmpty() const {return packet == 0;}
	
	Native::NetPacket* PickPacket() {Native::NetPacket* p = packet; packet = 0; return p;}
	
};








class Socket {
	$MakeMoveable();
	
	Vector<String> data_cache;
	mutable Mutex data_lock;
	
	Native::NetHost* host = 0;
	Native::NetAddress server_addr;
	dword timeout = 1000;
	bool is_listening = false;
	int channels = 5;
	
public:
	typedef Socket CLASSNAME;
	Socket();
	~Socket();
	
	bool OpenServer(uint16 port, int max_clients=100);
	bool OpenClient();
	void Close();
	SocketPeer Connect(String addr, uint16 port, int timeout=5000);
	void DisconnectAll(int timeout=3000);
	void Flush() {if (host) host->Flush();}
	
	bool Poll(Native::NetEvent& ev);
	void Send(SocketPeer peer, SocketPacket packet, int channel=0);
	void Broadcast(SocketPacket packet, int channel=0);
	void Put(SocketPeer peer, String s, bool is_reliable=false) {Send(peer, SocketPacket(s, is_reliable));}
	void Put(SocketPeer peer, const char* data, int len, bool is_reliable=false) {Send(peer, SocketPacket(data, len, is_reliable));}
	void Put(String s, bool is_reliable=false) {Broadcast(SocketPacket(s, is_reliable));}
	void Put(const char* data, int len, bool is_reliable=false) {Broadcast(SocketPacket(data, len, is_reliable));}
	
	void SetChannels(int ch) {ASSERT(ch > 0); ASSERT(!IsOpen()); channels = ch;}
	void SetTimeout(dword ms) {timeout = ms;}
	void SetNote(SocketPeer peer, String str);
	
	void GetPeers(Vector<SocketPeer>& peers) const;
	bool IsOpen() const {return host != NULL;}
	bool IsListening() const {return is_listening;}
	String GetNote(SocketPeer peer) const;
	
	static void Init();
	static void Deinit();
	
	
};



/*class WebSocket {
	typedef Native::StdWebSocket Std;
	One<Std> s;
	
public:
	inline WebSocket() {s.Create();}
	inline ~WebSocket() {}
	
	bool Listen(int port) {return s->Listen(port);}
	bool Accept(WebSocket& sock) {return s->Accept(sock.GetStd());}
	bool IsOpen() {return s->IsOpen();}
	void Close() {s->Close();}
	String GetLine(int max_len = UINT16_MAX) {return s->GetLine(Min<int>(UINT16_MAX, max_len));}
	String GetPeerAddr() {return s->GetPeerAddr();}
	inline int Put(String str) {return Put((void*)str.Begin(), str.GetCount());}
	int Put(const void* data, int size) {return s->Put(data, size);}
	int Get(void* data, int size) {return s->Get(data, size);}
	String Get(int size) {
		if (size <= 0) return String();
		Vector<char> v;
		v.SetCount(size+1);
		v[size] = 0;
		size = Get(v.Get(), size);
		if (size <= 0) return String();
		String s;
		s.Set(v.Get(), size, false);
		return s;
	}
	bool Connect(String addr, int port) {return s->Connect(addr.Begin(), port);}
	void Timeout(int ms) {s->Timeout(ms);}
	Std& GetStd() {return *s;}
};*/





















String TcpSocket::Get(int size) {
	Vector<char> buf;
	buf.SetCount(size);
	int got = Get(buf.Begin(), size);
	buf.SetCount(got);
	return String(buf.Begin(), got);
}

String TcpSocket::GetLine(int max_len) {
	if (!IsOpen())
		return "";
	
	String out;
	while (out.GetCount() < max_len) {
		char chr;
		int received = Get(&chr, 1);
		if (!received) {
			Close();
			break;
		}
		if (chr == '\n')
			break;
		out.Cat(chr);
	}
	return out;
}














Socket::Socket() {
	
}

Socket::~Socket() {
	Close();
}

bool Socket::OpenServer(uint16 port, int max_clients) {
	Close();
	
	server_addr.host = ENET_HOST_ANY;
	server_addr.port = port;
	host = Native::NetHost::Create(&server_addr  /* the address to bind the server host to */,
	                                max_clients  /* allow up to 32 clients and/or outgoing connections */,
	                                   channels  /* allow up to 2 channels to be used, 0 and 1 */,
	                                          0  /* assume any amount of incoming bandwidth */,
	                                          0  /* assume any amount of outgoing bandwidth */);
	is_listening = true;
	
	return host != NULL;
}

bool Socket::OpenClient() {
	Close();
	
	host = Native::NetHost::Create (NULL /* create a client host */,
	            1 /* only allow 1 outgoing connection */,
	            channels /* allow up x channels to be used */,
	            0 /* assume any amount of incoming bandwidth */,
	            0 /* assume any amount of outgoing bandwidth */);
	
	is_listening = false;
	
	return host != NULL;
}

void Socket::DisconnectAll(int timeout) {
	if (host) {
		host->DisconnectPeers();
		Sleep(timeout);
		host->ResetPeers();
	}
}

void Socket::Close() {
	if (host) {
		DisconnectAll(3000);
		host->Destroy();
		host = 0;
		is_listening = false;
		data_cache.Clear();
	}
}

SocketPeer Socket::Connect(String addr, uint16 port, int timeout) {
	if (host) {
		Native::NetPeer* peer = host->Connect(addr.Begin(), port, channels, timeout);
		return peer;
	}
	return SocketPeer();
}

bool Socket::Poll(Native::NetEvent& ev) {
	bool succ = false;
	if (host)
		succ = host->Poll(&ev, timeout) > 0;
	return succ;
}

void Socket::Send(SocketPeer peer, SocketPacket packet, int channel) {
	ASSERT(IsOpen());
	ASSERT(!peer.IsEmpty());
	ASSERT(!packet.IsEmpty());
	if (host && peer.peer && !packet.IsEmpty())
		peer.peer->Send(channel, packet.PickPacket());
}

void Socket::Broadcast(SocketPacket packet, int channel) {
	ASSERT(IsOpen());
	ASSERT(!packet.IsEmpty());
	if (host && !packet.IsEmpty())
		host->Broadcast(channel, packet.PickPacket());
}

void Socket::GetPeers(Vector<SocketPeer>& peers) const {
	peers.SetCount(0);
	if (host) {
		peers.Reserve(host->GetPeerCount());
		Native::NetPeer* it = host->Begin();
		Native::NetPeer* end = host->Begin() + host->GetPeerCount();
		while (it != end) {
			if (it->IsConnected())
				peers.Add(it);
			++it;
		}
	}
}

void Socket::SetNote(SocketPeer peer, String str) {
	data_lock.Enter();
	if (peer.peer) {
		if (peer.peer->GetDataRef()) {
			dword id = GetDwordRef(peer.peer->GetDataRef()) - 1;
			if (id < data_cache.GetCount())
				data_cache[id] = str;
		}
		else {
			dword id = data_cache.GetCount();
			data_cache.Add(str);
			GetDwordRef(peer.peer->GetDataRef()) = id + 1;
		}
	}
	data_lock.Leave();
}

String Socket::GetNote(SocketPeer peer) const {
	if (peer.peer && peer.peer->GetDataRef()) {
		dword id = GetDwordRef(peer.peer->GetDataRef()) - 1;
		if (id < data_cache.GetCount())
			return data_cache[id];
	}
	return "";
}

void Socket::Init() {
	ONCELOCK {
		Native::NetInitialize();
	}
}

void Socket::Deinit() {
	ONCELOCK {
		Native::NetDeinitialize();
	}
}










}

#define TcpSocket			Network::TcpSocket
#define SocketPeer			Network::SocketPeer
#define SocketPacket		Network::SocketPacket
#define Socket				Network::Socket
#define WebSocket			Network::WebSocket
